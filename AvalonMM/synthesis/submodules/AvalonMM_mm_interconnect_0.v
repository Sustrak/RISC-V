// AvalonMM_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module AvalonMM_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                      //                                    clk_0_clk.clk
		input  wire        sdram_pll_sys_clk_clk,                              //                            sdram_pll_sys_clk.clk
		input  wire        jtag_master_clk_reset_reset_bridge_in_reset_reset,  //  jtag_master_clk_reset_reset_bridge_in_reset.reset
		input  wire        led_r_reset_reset_bridge_in_reset_reset,            //            led_r_reset_reset_bridge_in_reset.reset
		input  wire        mm_bridge_reset_reset_bridge_in_reset_reset,        //        mm_bridge_reset_reset_bridge_in_reset.reset
		input  wire        sdram_controller_reset_reset_bridge_in_reset_reset, // sdram_controller_reset_reset_bridge_in_reset.reset
		input  wire [31:0] jtag_master_master_address,                         //                           jtag_master_master.address
		output wire        jtag_master_master_waitrequest,                     //                                             .waitrequest
		input  wire [3:0]  jtag_master_master_byteenable,                      //                                             .byteenable
		input  wire        jtag_master_master_read,                            //                                             .read
		output wire [31:0] jtag_master_master_readdata,                        //                                             .readdata
		output wire        jtag_master_master_readdatavalid,                   //                                             .readdatavalid
		input  wire        jtag_master_master_write,                           //                                             .write
		input  wire [31:0] jtag_master_master_writedata,                       //                                             .writedata
		input  wire [27:0] mm_bridge_m0_address,                               //                                 mm_bridge_m0.address
		output wire        mm_bridge_m0_waitrequest,                           //                                             .waitrequest
		input  wire [0:0]  mm_bridge_m0_burstcount,                            //                                             .burstcount
		input  wire [3:0]  mm_bridge_m0_byteenable,                            //                                             .byteenable
		input  wire        mm_bridge_m0_read,                                  //                                             .read
		output wire [31:0] mm_bridge_m0_readdata,                              //                                             .readdata
		output wire        mm_bridge_m0_readdatavalid,                         //                                             .readdatavalid
		input  wire        mm_bridge_m0_write,                                 //                                             .write
		input  wire [31:0] mm_bridge_m0_writedata,                             //                                             .writedata
		input  wire        mm_bridge_m0_debugaccess,                           //                                             .debugaccess
		output wire [1:0]  hex_03_avalon_parallel_port_slave_address,          //            hex_03_avalon_parallel_port_slave.address
		output wire        hex_03_avalon_parallel_port_slave_write,            //                                             .write
		output wire        hex_03_avalon_parallel_port_slave_read,             //                                             .read
		input  wire [31:0] hex_03_avalon_parallel_port_slave_readdata,         //                                             .readdata
		output wire [31:0] hex_03_avalon_parallel_port_slave_writedata,        //                                             .writedata
		output wire [3:0]  hex_03_avalon_parallel_port_slave_byteenable,       //                                             .byteenable
		output wire        hex_03_avalon_parallel_port_slave_chipselect,       //                                             .chipselect
		output wire [1:0]  hex_47_avalon_parallel_port_slave_address,          //            hex_47_avalon_parallel_port_slave.address
		output wire        hex_47_avalon_parallel_port_slave_write,            //                                             .write
		output wire        hex_47_avalon_parallel_port_slave_read,             //                                             .read
		input  wire [31:0] hex_47_avalon_parallel_port_slave_readdata,         //                                             .readdata
		output wire [31:0] hex_47_avalon_parallel_port_slave_writedata,        //                                             .writedata
		output wire [3:0]  hex_47_avalon_parallel_port_slave_byteenable,       //                                             .byteenable
		output wire        hex_47_avalon_parallel_port_slave_chipselect,       //                                             .chipselect
		output wire [1:0]  key_avalon_parallel_port_slave_address,             //               key_avalon_parallel_port_slave.address
		output wire        key_avalon_parallel_port_slave_write,               //                                             .write
		output wire        key_avalon_parallel_port_slave_read,                //                                             .read
		input  wire [31:0] key_avalon_parallel_port_slave_readdata,            //                                             .readdata
		output wire [31:0] key_avalon_parallel_port_slave_writedata,           //                                             .writedata
		output wire [3:0]  key_avalon_parallel_port_slave_byteenable,          //                                             .byteenable
		output wire        key_avalon_parallel_port_slave_chipselect,          //                                             .chipselect
		output wire [1:0]  led_g_avalon_parallel_port_slave_address,           //             led_g_avalon_parallel_port_slave.address
		output wire        led_g_avalon_parallel_port_slave_write,             //                                             .write
		output wire        led_g_avalon_parallel_port_slave_read,              //                                             .read
		input  wire [31:0] led_g_avalon_parallel_port_slave_readdata,          //                                             .readdata
		output wire [31:0] led_g_avalon_parallel_port_slave_writedata,         //                                             .writedata
		output wire [3:0]  led_g_avalon_parallel_port_slave_byteenable,        //                                             .byteenable
		output wire        led_g_avalon_parallel_port_slave_chipselect,        //                                             .chipselect
		output wire [1:0]  led_r_avalon_parallel_port_slave_address,           //             led_r_avalon_parallel_port_slave.address
		output wire        led_r_avalon_parallel_port_slave_write,             //                                             .write
		output wire        led_r_avalon_parallel_port_slave_read,              //                                             .read
		input  wire [31:0] led_r_avalon_parallel_port_slave_readdata,          //                                             .readdata
		output wire [31:0] led_r_avalon_parallel_port_slave_writedata,         //                                             .writedata
		output wire [3:0]  led_r_avalon_parallel_port_slave_byteenable,        //                                             .byteenable
		output wire        led_r_avalon_parallel_port_slave_chipselect,        //                                             .chipselect
		output wire [24:0] sdram_controller_s1_address,                        //                          sdram_controller_s1.address
		output wire        sdram_controller_s1_write,                          //                                             .write
		output wire        sdram_controller_s1_read,                           //                                             .read
		input  wire [31:0] sdram_controller_s1_readdata,                       //                                             .readdata
		output wire [31:0] sdram_controller_s1_writedata,                      //                                             .writedata
		output wire [3:0]  sdram_controller_s1_byteenable,                     //                                             .byteenable
		input  wire        sdram_controller_s1_readdatavalid,                  //                                             .readdatavalid
		input  wire        sdram_controller_s1_waitrequest,                    //                                             .waitrequest
		output wire        sdram_controller_s1_chipselect,                     //                                             .chipselect
		output wire [1:0]  switch_avalon_parallel_port_slave_address,          //            switch_avalon_parallel_port_slave.address
		output wire        switch_avalon_parallel_port_slave_write,            //                                             .write
		output wire        switch_avalon_parallel_port_slave_read,             //                                             .read
		input  wire [31:0] switch_avalon_parallel_port_slave_readdata,         //                                             .readdata
		output wire [31:0] switch_avalon_parallel_port_slave_writedata,        //                                             .writedata
		output wire [3:0]  switch_avalon_parallel_port_slave_byteenable,       //                                             .byteenable
		output wire        switch_avalon_parallel_port_slave_chipselect        //                                             .chipselect
	);

	wire          mm_bridge_m0_translator_avalon_universal_master_0_waitrequest;         // mm_bridge_m0_agent:av_waitrequest -> mm_bridge_m0_translator:uav_waitrequest
	wire   [31:0] mm_bridge_m0_translator_avalon_universal_master_0_readdata;            // mm_bridge_m0_agent:av_readdata -> mm_bridge_m0_translator:uav_readdata
	wire          mm_bridge_m0_translator_avalon_universal_master_0_debugaccess;         // mm_bridge_m0_translator:uav_debugaccess -> mm_bridge_m0_agent:av_debugaccess
	wire   [31:0] mm_bridge_m0_translator_avalon_universal_master_0_address;             // mm_bridge_m0_translator:uav_address -> mm_bridge_m0_agent:av_address
	wire          mm_bridge_m0_translator_avalon_universal_master_0_read;                // mm_bridge_m0_translator:uav_read -> mm_bridge_m0_agent:av_read
	wire    [3:0] mm_bridge_m0_translator_avalon_universal_master_0_byteenable;          // mm_bridge_m0_translator:uav_byteenable -> mm_bridge_m0_agent:av_byteenable
	wire          mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid;       // mm_bridge_m0_agent:av_readdatavalid -> mm_bridge_m0_translator:uav_readdatavalid
	wire          mm_bridge_m0_translator_avalon_universal_master_0_lock;                // mm_bridge_m0_translator:uav_lock -> mm_bridge_m0_agent:av_lock
	wire          mm_bridge_m0_translator_avalon_universal_master_0_write;               // mm_bridge_m0_translator:uav_write -> mm_bridge_m0_agent:av_write
	wire   [31:0] mm_bridge_m0_translator_avalon_universal_master_0_writedata;           // mm_bridge_m0_translator:uav_writedata -> mm_bridge_m0_agent:av_writedata
	wire    [2:0] mm_bridge_m0_translator_avalon_universal_master_0_burstcount;          // mm_bridge_m0_translator:uav_burstcount -> mm_bridge_m0_agent:av_burstcount
	wire          jtag_master_master_translator_avalon_universal_master_0_waitrequest;   // jtag_master_master_agent:av_waitrequest -> jtag_master_master_translator:uav_waitrequest
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_readdata;      // jtag_master_master_agent:av_readdata -> jtag_master_master_translator:uav_readdata
	wire          jtag_master_master_translator_avalon_universal_master_0_debugaccess;   // jtag_master_master_translator:uav_debugaccess -> jtag_master_master_agent:av_debugaccess
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_address;       // jtag_master_master_translator:uav_address -> jtag_master_master_agent:av_address
	wire          jtag_master_master_translator_avalon_universal_master_0_read;          // jtag_master_master_translator:uav_read -> jtag_master_master_agent:av_read
	wire    [3:0] jtag_master_master_translator_avalon_universal_master_0_byteenable;    // jtag_master_master_translator:uav_byteenable -> jtag_master_master_agent:av_byteenable
	wire          jtag_master_master_translator_avalon_universal_master_0_readdatavalid; // jtag_master_master_agent:av_readdatavalid -> jtag_master_master_translator:uav_readdatavalid
	wire          jtag_master_master_translator_avalon_universal_master_0_lock;          // jtag_master_master_translator:uav_lock -> jtag_master_master_agent:av_lock
	wire          jtag_master_master_translator_avalon_universal_master_0_write;         // jtag_master_master_translator:uav_write -> jtag_master_master_agent:av_write
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_writedata;     // jtag_master_master_translator:uav_writedata -> jtag_master_master_agent:av_writedata
	wire    [2:0] jtag_master_master_translator_avalon_universal_master_0_burstcount;    // jtag_master_master_translator:uav_burstcount -> jtag_master_master_agent:av_burstcount
	wire   [31:0] led_r_avalon_parallel_port_slave_agent_m0_readdata;                    // led_r_avalon_parallel_port_slave_translator:uav_readdata -> led_r_avalon_parallel_port_slave_agent:m0_readdata
	wire          led_r_avalon_parallel_port_slave_agent_m0_waitrequest;                 // led_r_avalon_parallel_port_slave_translator:uav_waitrequest -> led_r_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          led_r_avalon_parallel_port_slave_agent_m0_debugaccess;                 // led_r_avalon_parallel_port_slave_agent:m0_debugaccess -> led_r_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] led_r_avalon_parallel_port_slave_agent_m0_address;                     // led_r_avalon_parallel_port_slave_agent:m0_address -> led_r_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] led_r_avalon_parallel_port_slave_agent_m0_byteenable;                  // led_r_avalon_parallel_port_slave_agent:m0_byteenable -> led_r_avalon_parallel_port_slave_translator:uav_byteenable
	wire          led_r_avalon_parallel_port_slave_agent_m0_read;                        // led_r_avalon_parallel_port_slave_agent:m0_read -> led_r_avalon_parallel_port_slave_translator:uav_read
	wire          led_r_avalon_parallel_port_slave_agent_m0_readdatavalid;               // led_r_avalon_parallel_port_slave_translator:uav_readdatavalid -> led_r_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          led_r_avalon_parallel_port_slave_agent_m0_lock;                        // led_r_avalon_parallel_port_slave_agent:m0_lock -> led_r_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] led_r_avalon_parallel_port_slave_agent_m0_writedata;                   // led_r_avalon_parallel_port_slave_agent:m0_writedata -> led_r_avalon_parallel_port_slave_translator:uav_writedata
	wire          led_r_avalon_parallel_port_slave_agent_m0_write;                       // led_r_avalon_parallel_port_slave_agent:m0_write -> led_r_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] led_r_avalon_parallel_port_slave_agent_m0_burstcount;                  // led_r_avalon_parallel_port_slave_agent:m0_burstcount -> led_r_avalon_parallel_port_slave_translator:uav_burstcount
	wire          led_r_avalon_parallel_port_slave_agent_rf_source_valid;                // led_r_avalon_parallel_port_slave_agent:rf_source_valid -> led_r_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [106:0] led_r_avalon_parallel_port_slave_agent_rf_source_data;                 // led_r_avalon_parallel_port_slave_agent:rf_source_data -> led_r_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          led_r_avalon_parallel_port_slave_agent_rf_source_ready;                // led_r_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> led_r_avalon_parallel_port_slave_agent:rf_source_ready
	wire          led_r_avalon_parallel_port_slave_agent_rf_source_startofpacket;        // led_r_avalon_parallel_port_slave_agent:rf_source_startofpacket -> led_r_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          led_r_avalon_parallel_port_slave_agent_rf_source_endofpacket;          // led_r_avalon_parallel_port_slave_agent:rf_source_endofpacket -> led_r_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;             // led_r_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> led_r_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [106:0] led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_data;              // led_r_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> led_r_avalon_parallel_port_slave_agent:rf_sink_data
	wire          led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;             // led_r_avalon_parallel_port_slave_agent:rf_sink_ready -> led_r_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;     // led_r_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> led_r_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;       // led_r_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> led_r_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          led_r_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;           // led_r_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> led_r_avalon_parallel_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] led_r_avalon_parallel_port_slave_agent_rdata_fifo_src_data;            // led_r_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> led_r_avalon_parallel_port_slave_agent_rdata_fifo:in_data
	wire          led_r_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;           // led_r_avalon_parallel_port_slave_agent_rdata_fifo:in_ready -> led_r_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> led_r_avalon_parallel_port_slave_agent:cp_valid
	wire  [105:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> led_r_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                     // led_r_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux:src_ready
	wire    [6:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> led_r_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> led_r_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> led_r_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] hex_03_avalon_parallel_port_slave_agent_m0_readdata;                   // hex_03_avalon_parallel_port_slave_translator:uav_readdata -> hex_03_avalon_parallel_port_slave_agent:m0_readdata
	wire          hex_03_avalon_parallel_port_slave_agent_m0_waitrequest;                // hex_03_avalon_parallel_port_slave_translator:uav_waitrequest -> hex_03_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          hex_03_avalon_parallel_port_slave_agent_m0_debugaccess;                // hex_03_avalon_parallel_port_slave_agent:m0_debugaccess -> hex_03_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] hex_03_avalon_parallel_port_slave_agent_m0_address;                    // hex_03_avalon_parallel_port_slave_agent:m0_address -> hex_03_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] hex_03_avalon_parallel_port_slave_agent_m0_byteenable;                 // hex_03_avalon_parallel_port_slave_agent:m0_byteenable -> hex_03_avalon_parallel_port_slave_translator:uav_byteenable
	wire          hex_03_avalon_parallel_port_slave_agent_m0_read;                       // hex_03_avalon_parallel_port_slave_agent:m0_read -> hex_03_avalon_parallel_port_slave_translator:uav_read
	wire          hex_03_avalon_parallel_port_slave_agent_m0_readdatavalid;              // hex_03_avalon_parallel_port_slave_translator:uav_readdatavalid -> hex_03_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          hex_03_avalon_parallel_port_slave_agent_m0_lock;                       // hex_03_avalon_parallel_port_slave_agent:m0_lock -> hex_03_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] hex_03_avalon_parallel_port_slave_agent_m0_writedata;                  // hex_03_avalon_parallel_port_slave_agent:m0_writedata -> hex_03_avalon_parallel_port_slave_translator:uav_writedata
	wire          hex_03_avalon_parallel_port_slave_agent_m0_write;                      // hex_03_avalon_parallel_port_slave_agent:m0_write -> hex_03_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] hex_03_avalon_parallel_port_slave_agent_m0_burstcount;                 // hex_03_avalon_parallel_port_slave_agent:m0_burstcount -> hex_03_avalon_parallel_port_slave_translator:uav_burstcount
	wire          hex_03_avalon_parallel_port_slave_agent_rf_source_valid;               // hex_03_avalon_parallel_port_slave_agent:rf_source_valid -> hex_03_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [106:0] hex_03_avalon_parallel_port_slave_agent_rf_source_data;                // hex_03_avalon_parallel_port_slave_agent:rf_source_data -> hex_03_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          hex_03_avalon_parallel_port_slave_agent_rf_source_ready;               // hex_03_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> hex_03_avalon_parallel_port_slave_agent:rf_source_ready
	wire          hex_03_avalon_parallel_port_slave_agent_rf_source_startofpacket;       // hex_03_avalon_parallel_port_slave_agent:rf_source_startofpacket -> hex_03_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          hex_03_avalon_parallel_port_slave_agent_rf_source_endofpacket;         // hex_03_avalon_parallel_port_slave_agent:rf_source_endofpacket -> hex_03_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;            // hex_03_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> hex_03_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [106:0] hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_data;             // hex_03_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> hex_03_avalon_parallel_port_slave_agent:rf_sink_data
	wire          hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;            // hex_03_avalon_parallel_port_slave_agent:rf_sink_ready -> hex_03_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;    // hex_03_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> hex_03_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;      // hex_03_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> hex_03_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          hex_03_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;          // hex_03_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> hex_03_avalon_parallel_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] hex_03_avalon_parallel_port_slave_agent_rdata_fifo_src_data;           // hex_03_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> hex_03_avalon_parallel_port_slave_agent_rdata_fifo:in_data
	wire          hex_03_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;          // hex_03_avalon_parallel_port_slave_agent_rdata_fifo:in_ready -> hex_03_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                 // cmd_mux_001:src_valid -> hex_03_avalon_parallel_port_slave_agent:cp_valid
	wire  [105:0] cmd_mux_001_src_data;                                                  // cmd_mux_001:src_data -> hex_03_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                 // hex_03_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [6:0] cmd_mux_001_src_channel;                                               // cmd_mux_001:src_channel -> hex_03_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                         // cmd_mux_001:src_startofpacket -> hex_03_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                           // cmd_mux_001:src_endofpacket -> hex_03_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] hex_47_avalon_parallel_port_slave_agent_m0_readdata;                   // hex_47_avalon_parallel_port_slave_translator:uav_readdata -> hex_47_avalon_parallel_port_slave_agent:m0_readdata
	wire          hex_47_avalon_parallel_port_slave_agent_m0_waitrequest;                // hex_47_avalon_parallel_port_slave_translator:uav_waitrequest -> hex_47_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          hex_47_avalon_parallel_port_slave_agent_m0_debugaccess;                // hex_47_avalon_parallel_port_slave_agent:m0_debugaccess -> hex_47_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] hex_47_avalon_parallel_port_slave_agent_m0_address;                    // hex_47_avalon_parallel_port_slave_agent:m0_address -> hex_47_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] hex_47_avalon_parallel_port_slave_agent_m0_byteenable;                 // hex_47_avalon_parallel_port_slave_agent:m0_byteenable -> hex_47_avalon_parallel_port_slave_translator:uav_byteenable
	wire          hex_47_avalon_parallel_port_slave_agent_m0_read;                       // hex_47_avalon_parallel_port_slave_agent:m0_read -> hex_47_avalon_parallel_port_slave_translator:uav_read
	wire          hex_47_avalon_parallel_port_slave_agent_m0_readdatavalid;              // hex_47_avalon_parallel_port_slave_translator:uav_readdatavalid -> hex_47_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          hex_47_avalon_parallel_port_slave_agent_m0_lock;                       // hex_47_avalon_parallel_port_slave_agent:m0_lock -> hex_47_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] hex_47_avalon_parallel_port_slave_agent_m0_writedata;                  // hex_47_avalon_parallel_port_slave_agent:m0_writedata -> hex_47_avalon_parallel_port_slave_translator:uav_writedata
	wire          hex_47_avalon_parallel_port_slave_agent_m0_write;                      // hex_47_avalon_parallel_port_slave_agent:m0_write -> hex_47_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] hex_47_avalon_parallel_port_slave_agent_m0_burstcount;                 // hex_47_avalon_parallel_port_slave_agent:m0_burstcount -> hex_47_avalon_parallel_port_slave_translator:uav_burstcount
	wire          hex_47_avalon_parallel_port_slave_agent_rf_source_valid;               // hex_47_avalon_parallel_port_slave_agent:rf_source_valid -> hex_47_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [106:0] hex_47_avalon_parallel_port_slave_agent_rf_source_data;                // hex_47_avalon_parallel_port_slave_agent:rf_source_data -> hex_47_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          hex_47_avalon_parallel_port_slave_agent_rf_source_ready;               // hex_47_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> hex_47_avalon_parallel_port_slave_agent:rf_source_ready
	wire          hex_47_avalon_parallel_port_slave_agent_rf_source_startofpacket;       // hex_47_avalon_parallel_port_slave_agent:rf_source_startofpacket -> hex_47_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          hex_47_avalon_parallel_port_slave_agent_rf_source_endofpacket;         // hex_47_avalon_parallel_port_slave_agent:rf_source_endofpacket -> hex_47_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;            // hex_47_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> hex_47_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [106:0] hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_data;             // hex_47_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> hex_47_avalon_parallel_port_slave_agent:rf_sink_data
	wire          hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;            // hex_47_avalon_parallel_port_slave_agent:rf_sink_ready -> hex_47_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;    // hex_47_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> hex_47_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;      // hex_47_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> hex_47_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          hex_47_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;          // hex_47_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> hex_47_avalon_parallel_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] hex_47_avalon_parallel_port_slave_agent_rdata_fifo_src_data;           // hex_47_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> hex_47_avalon_parallel_port_slave_agent_rdata_fifo:in_data
	wire          hex_47_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;          // hex_47_avalon_parallel_port_slave_agent_rdata_fifo:in_ready -> hex_47_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                 // cmd_mux_002:src_valid -> hex_47_avalon_parallel_port_slave_agent:cp_valid
	wire  [105:0] cmd_mux_002_src_data;                                                  // cmd_mux_002:src_data -> hex_47_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                 // hex_47_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [6:0] cmd_mux_002_src_channel;                                               // cmd_mux_002:src_channel -> hex_47_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                         // cmd_mux_002:src_startofpacket -> hex_47_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                           // cmd_mux_002:src_endofpacket -> hex_47_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] key_avalon_parallel_port_slave_agent_m0_readdata;                      // key_avalon_parallel_port_slave_translator:uav_readdata -> key_avalon_parallel_port_slave_agent:m0_readdata
	wire          key_avalon_parallel_port_slave_agent_m0_waitrequest;                   // key_avalon_parallel_port_slave_translator:uav_waitrequest -> key_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          key_avalon_parallel_port_slave_agent_m0_debugaccess;                   // key_avalon_parallel_port_slave_agent:m0_debugaccess -> key_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] key_avalon_parallel_port_slave_agent_m0_address;                       // key_avalon_parallel_port_slave_agent:m0_address -> key_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] key_avalon_parallel_port_slave_agent_m0_byteenable;                    // key_avalon_parallel_port_slave_agent:m0_byteenable -> key_avalon_parallel_port_slave_translator:uav_byteenable
	wire          key_avalon_parallel_port_slave_agent_m0_read;                          // key_avalon_parallel_port_slave_agent:m0_read -> key_avalon_parallel_port_slave_translator:uav_read
	wire          key_avalon_parallel_port_slave_agent_m0_readdatavalid;                 // key_avalon_parallel_port_slave_translator:uav_readdatavalid -> key_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          key_avalon_parallel_port_slave_agent_m0_lock;                          // key_avalon_parallel_port_slave_agent:m0_lock -> key_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] key_avalon_parallel_port_slave_agent_m0_writedata;                     // key_avalon_parallel_port_slave_agent:m0_writedata -> key_avalon_parallel_port_slave_translator:uav_writedata
	wire          key_avalon_parallel_port_slave_agent_m0_write;                         // key_avalon_parallel_port_slave_agent:m0_write -> key_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] key_avalon_parallel_port_slave_agent_m0_burstcount;                    // key_avalon_parallel_port_slave_agent:m0_burstcount -> key_avalon_parallel_port_slave_translator:uav_burstcount
	wire          key_avalon_parallel_port_slave_agent_rf_source_valid;                  // key_avalon_parallel_port_slave_agent:rf_source_valid -> key_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [106:0] key_avalon_parallel_port_slave_agent_rf_source_data;                   // key_avalon_parallel_port_slave_agent:rf_source_data -> key_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          key_avalon_parallel_port_slave_agent_rf_source_ready;                  // key_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> key_avalon_parallel_port_slave_agent:rf_source_ready
	wire          key_avalon_parallel_port_slave_agent_rf_source_startofpacket;          // key_avalon_parallel_port_slave_agent:rf_source_startofpacket -> key_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          key_avalon_parallel_port_slave_agent_rf_source_endofpacket;            // key_avalon_parallel_port_slave_agent:rf_source_endofpacket -> key_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          key_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;               // key_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> key_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [106:0] key_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                // key_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> key_avalon_parallel_port_slave_agent:rf_sink_data
	wire          key_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;               // key_avalon_parallel_port_slave_agent:rf_sink_ready -> key_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          key_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;       // key_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> key_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          key_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;         // key_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> key_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          key_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;             // key_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> key_avalon_parallel_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] key_avalon_parallel_port_slave_agent_rdata_fifo_src_data;              // key_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> key_avalon_parallel_port_slave_agent_rdata_fifo:in_data
	wire          key_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;             // key_avalon_parallel_port_slave_agent_rdata_fifo:in_ready -> key_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                 // cmd_mux_003:src_valid -> key_avalon_parallel_port_slave_agent:cp_valid
	wire  [105:0] cmd_mux_003_src_data;                                                  // cmd_mux_003:src_data -> key_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                 // key_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [6:0] cmd_mux_003_src_channel;                                               // cmd_mux_003:src_channel -> key_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                         // cmd_mux_003:src_startofpacket -> key_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                           // cmd_mux_003:src_endofpacket -> key_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] switch_avalon_parallel_port_slave_agent_m0_readdata;                   // switch_avalon_parallel_port_slave_translator:uav_readdata -> switch_avalon_parallel_port_slave_agent:m0_readdata
	wire          switch_avalon_parallel_port_slave_agent_m0_waitrequest;                // switch_avalon_parallel_port_slave_translator:uav_waitrequest -> switch_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          switch_avalon_parallel_port_slave_agent_m0_debugaccess;                // switch_avalon_parallel_port_slave_agent:m0_debugaccess -> switch_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] switch_avalon_parallel_port_slave_agent_m0_address;                    // switch_avalon_parallel_port_slave_agent:m0_address -> switch_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] switch_avalon_parallel_port_slave_agent_m0_byteenable;                 // switch_avalon_parallel_port_slave_agent:m0_byteenable -> switch_avalon_parallel_port_slave_translator:uav_byteenable
	wire          switch_avalon_parallel_port_slave_agent_m0_read;                       // switch_avalon_parallel_port_slave_agent:m0_read -> switch_avalon_parallel_port_slave_translator:uav_read
	wire          switch_avalon_parallel_port_slave_agent_m0_readdatavalid;              // switch_avalon_parallel_port_slave_translator:uav_readdatavalid -> switch_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          switch_avalon_parallel_port_slave_agent_m0_lock;                       // switch_avalon_parallel_port_slave_agent:m0_lock -> switch_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] switch_avalon_parallel_port_slave_agent_m0_writedata;                  // switch_avalon_parallel_port_slave_agent:m0_writedata -> switch_avalon_parallel_port_slave_translator:uav_writedata
	wire          switch_avalon_parallel_port_slave_agent_m0_write;                      // switch_avalon_parallel_port_slave_agent:m0_write -> switch_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] switch_avalon_parallel_port_slave_agent_m0_burstcount;                 // switch_avalon_parallel_port_slave_agent:m0_burstcount -> switch_avalon_parallel_port_slave_translator:uav_burstcount
	wire          switch_avalon_parallel_port_slave_agent_rf_source_valid;               // switch_avalon_parallel_port_slave_agent:rf_source_valid -> switch_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [106:0] switch_avalon_parallel_port_slave_agent_rf_source_data;                // switch_avalon_parallel_port_slave_agent:rf_source_data -> switch_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          switch_avalon_parallel_port_slave_agent_rf_source_ready;               // switch_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> switch_avalon_parallel_port_slave_agent:rf_source_ready
	wire          switch_avalon_parallel_port_slave_agent_rf_source_startofpacket;       // switch_avalon_parallel_port_slave_agent:rf_source_startofpacket -> switch_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          switch_avalon_parallel_port_slave_agent_rf_source_endofpacket;         // switch_avalon_parallel_port_slave_agent:rf_source_endofpacket -> switch_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          switch_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;            // switch_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> switch_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [106:0] switch_avalon_parallel_port_slave_agent_rsp_fifo_out_data;             // switch_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> switch_avalon_parallel_port_slave_agent:rf_sink_data
	wire          switch_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;            // switch_avalon_parallel_port_slave_agent:rf_sink_ready -> switch_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          switch_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;    // switch_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> switch_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          switch_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;      // switch_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> switch_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          switch_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;          // switch_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> switch_avalon_parallel_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] switch_avalon_parallel_port_slave_agent_rdata_fifo_src_data;           // switch_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> switch_avalon_parallel_port_slave_agent_rdata_fifo:in_data
	wire          switch_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;          // switch_avalon_parallel_port_slave_agent_rdata_fifo:in_ready -> switch_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                 // cmd_mux_004:src_valid -> switch_avalon_parallel_port_slave_agent:cp_valid
	wire  [105:0] cmd_mux_004_src_data;                                                  // cmd_mux_004:src_data -> switch_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                 // switch_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [6:0] cmd_mux_004_src_channel;                                               // cmd_mux_004:src_channel -> switch_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                         // cmd_mux_004:src_startofpacket -> switch_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                           // cmd_mux_004:src_endofpacket -> switch_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] led_g_avalon_parallel_port_slave_agent_m0_readdata;                    // led_g_avalon_parallel_port_slave_translator:uav_readdata -> led_g_avalon_parallel_port_slave_agent:m0_readdata
	wire          led_g_avalon_parallel_port_slave_agent_m0_waitrequest;                 // led_g_avalon_parallel_port_slave_translator:uav_waitrequest -> led_g_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          led_g_avalon_parallel_port_slave_agent_m0_debugaccess;                 // led_g_avalon_parallel_port_slave_agent:m0_debugaccess -> led_g_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] led_g_avalon_parallel_port_slave_agent_m0_address;                     // led_g_avalon_parallel_port_slave_agent:m0_address -> led_g_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] led_g_avalon_parallel_port_slave_agent_m0_byteenable;                  // led_g_avalon_parallel_port_slave_agent:m0_byteenable -> led_g_avalon_parallel_port_slave_translator:uav_byteenable
	wire          led_g_avalon_parallel_port_slave_agent_m0_read;                        // led_g_avalon_parallel_port_slave_agent:m0_read -> led_g_avalon_parallel_port_slave_translator:uav_read
	wire          led_g_avalon_parallel_port_slave_agent_m0_readdatavalid;               // led_g_avalon_parallel_port_slave_translator:uav_readdatavalid -> led_g_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          led_g_avalon_parallel_port_slave_agent_m0_lock;                        // led_g_avalon_parallel_port_slave_agent:m0_lock -> led_g_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] led_g_avalon_parallel_port_slave_agent_m0_writedata;                   // led_g_avalon_parallel_port_slave_agent:m0_writedata -> led_g_avalon_parallel_port_slave_translator:uav_writedata
	wire          led_g_avalon_parallel_port_slave_agent_m0_write;                       // led_g_avalon_parallel_port_slave_agent:m0_write -> led_g_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] led_g_avalon_parallel_port_slave_agent_m0_burstcount;                  // led_g_avalon_parallel_port_slave_agent:m0_burstcount -> led_g_avalon_parallel_port_slave_translator:uav_burstcount
	wire          led_g_avalon_parallel_port_slave_agent_rf_source_valid;                // led_g_avalon_parallel_port_slave_agent:rf_source_valid -> led_g_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [106:0] led_g_avalon_parallel_port_slave_agent_rf_source_data;                 // led_g_avalon_parallel_port_slave_agent:rf_source_data -> led_g_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          led_g_avalon_parallel_port_slave_agent_rf_source_ready;                // led_g_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> led_g_avalon_parallel_port_slave_agent:rf_source_ready
	wire          led_g_avalon_parallel_port_slave_agent_rf_source_startofpacket;        // led_g_avalon_parallel_port_slave_agent:rf_source_startofpacket -> led_g_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          led_g_avalon_parallel_port_slave_agent_rf_source_endofpacket;          // led_g_avalon_parallel_port_slave_agent:rf_source_endofpacket -> led_g_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;             // led_g_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> led_g_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [106:0] led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_data;              // led_g_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> led_g_avalon_parallel_port_slave_agent:rf_sink_data
	wire          led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;             // led_g_avalon_parallel_port_slave_agent:rf_sink_ready -> led_g_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;     // led_g_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> led_g_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;       // led_g_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> led_g_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          led_g_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;           // led_g_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> led_g_avalon_parallel_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] led_g_avalon_parallel_port_slave_agent_rdata_fifo_src_data;            // led_g_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> led_g_avalon_parallel_port_slave_agent_rdata_fifo:in_data
	wire          led_g_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;           // led_g_avalon_parallel_port_slave_agent_rdata_fifo:in_ready -> led_g_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                 // cmd_mux_005:src_valid -> led_g_avalon_parallel_port_slave_agent:cp_valid
	wire  [105:0] cmd_mux_005_src_data;                                                  // cmd_mux_005:src_data -> led_g_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                 // led_g_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [6:0] cmd_mux_005_src_channel;                                               // cmd_mux_005:src_channel -> led_g_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                         // cmd_mux_005:src_startofpacket -> led_g_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                           // cmd_mux_005:src_endofpacket -> led_g_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] sdram_controller_s1_agent_m0_readdata;                                 // sdram_controller_s1_translator:uav_readdata -> sdram_controller_s1_agent:m0_readdata
	wire          sdram_controller_s1_agent_m0_waitrequest;                              // sdram_controller_s1_translator:uav_waitrequest -> sdram_controller_s1_agent:m0_waitrequest
	wire          sdram_controller_s1_agent_m0_debugaccess;                              // sdram_controller_s1_agent:m0_debugaccess -> sdram_controller_s1_translator:uav_debugaccess
	wire   [31:0] sdram_controller_s1_agent_m0_address;                                  // sdram_controller_s1_agent:m0_address -> sdram_controller_s1_translator:uav_address
	wire    [3:0] sdram_controller_s1_agent_m0_byteenable;                               // sdram_controller_s1_agent:m0_byteenable -> sdram_controller_s1_translator:uav_byteenable
	wire          sdram_controller_s1_agent_m0_read;                                     // sdram_controller_s1_agent:m0_read -> sdram_controller_s1_translator:uav_read
	wire          sdram_controller_s1_agent_m0_readdatavalid;                            // sdram_controller_s1_translator:uav_readdatavalid -> sdram_controller_s1_agent:m0_readdatavalid
	wire          sdram_controller_s1_agent_m0_lock;                                     // sdram_controller_s1_agent:m0_lock -> sdram_controller_s1_translator:uav_lock
	wire   [31:0] sdram_controller_s1_agent_m0_writedata;                                // sdram_controller_s1_agent:m0_writedata -> sdram_controller_s1_translator:uav_writedata
	wire          sdram_controller_s1_agent_m0_write;                                    // sdram_controller_s1_agent:m0_write -> sdram_controller_s1_translator:uav_write
	wire    [2:0] sdram_controller_s1_agent_m0_burstcount;                               // sdram_controller_s1_agent:m0_burstcount -> sdram_controller_s1_translator:uav_burstcount
	wire          sdram_controller_s1_agent_rf_source_valid;                             // sdram_controller_s1_agent:rf_source_valid -> sdram_controller_s1_agent_rsp_fifo:in_valid
	wire  [106:0] sdram_controller_s1_agent_rf_source_data;                              // sdram_controller_s1_agent:rf_source_data -> sdram_controller_s1_agent_rsp_fifo:in_data
	wire          sdram_controller_s1_agent_rf_source_ready;                             // sdram_controller_s1_agent_rsp_fifo:in_ready -> sdram_controller_s1_agent:rf_source_ready
	wire          sdram_controller_s1_agent_rf_source_startofpacket;                     // sdram_controller_s1_agent:rf_source_startofpacket -> sdram_controller_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_controller_s1_agent_rf_source_endofpacket;                       // sdram_controller_s1_agent:rf_source_endofpacket -> sdram_controller_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_valid;                          // sdram_controller_s1_agent_rsp_fifo:out_valid -> sdram_controller_s1_agent:rf_sink_valid
	wire  [106:0] sdram_controller_s1_agent_rsp_fifo_out_data;                           // sdram_controller_s1_agent_rsp_fifo:out_data -> sdram_controller_s1_agent:rf_sink_data
	wire          sdram_controller_s1_agent_rsp_fifo_out_ready;                          // sdram_controller_s1_agent:rf_sink_ready -> sdram_controller_s1_agent_rsp_fifo:out_ready
	wire          sdram_controller_s1_agent_rsp_fifo_out_startofpacket;                  // sdram_controller_s1_agent_rsp_fifo:out_startofpacket -> sdram_controller_s1_agent:rf_sink_startofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_endofpacket;                    // sdram_controller_s1_agent_rsp_fifo:out_endofpacket -> sdram_controller_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                 // cmd_mux_006:src_valid -> sdram_controller_s1_agent:cp_valid
	wire  [105:0] cmd_mux_006_src_data;                                                  // cmd_mux_006:src_data -> sdram_controller_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                 // sdram_controller_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [6:0] cmd_mux_006_src_channel;                                               // cmd_mux_006:src_channel -> sdram_controller_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                         // cmd_mux_006:src_startofpacket -> sdram_controller_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                           // cmd_mux_006:src_endofpacket -> sdram_controller_s1_agent:cp_endofpacket
	wire          mm_bridge_m0_agent_cp_valid;                                           // mm_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [105:0] mm_bridge_m0_agent_cp_data;                                            // mm_bridge_m0_agent:cp_data -> router:sink_data
	wire          mm_bridge_m0_agent_cp_ready;                                           // router:sink_ready -> mm_bridge_m0_agent:cp_ready
	wire          mm_bridge_m0_agent_cp_startofpacket;                                   // mm_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mm_bridge_m0_agent_cp_endofpacket;                                     // mm_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          jtag_master_master_agent_cp_valid;                                     // jtag_master_master_agent:cp_valid -> router_001:sink_valid
	wire  [105:0] jtag_master_master_agent_cp_data;                                      // jtag_master_master_agent:cp_data -> router_001:sink_data
	wire          jtag_master_master_agent_cp_ready;                                     // router_001:sink_ready -> jtag_master_master_agent:cp_ready
	wire          jtag_master_master_agent_cp_startofpacket;                             // jtag_master_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          jtag_master_master_agent_cp_endofpacket;                               // jtag_master_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          led_r_avalon_parallel_port_slave_agent_rp_valid;                       // led_r_avalon_parallel_port_slave_agent:rp_valid -> router_002:sink_valid
	wire  [105:0] led_r_avalon_parallel_port_slave_agent_rp_data;                        // led_r_avalon_parallel_port_slave_agent:rp_data -> router_002:sink_data
	wire          led_r_avalon_parallel_port_slave_agent_rp_ready;                       // router_002:sink_ready -> led_r_avalon_parallel_port_slave_agent:rp_ready
	wire          led_r_avalon_parallel_port_slave_agent_rp_startofpacket;               // led_r_avalon_parallel_port_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          led_r_avalon_parallel_port_slave_agent_rp_endofpacket;                 // led_r_avalon_parallel_port_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                  // router_002:src_valid -> rsp_demux:sink_valid
	wire  [105:0] router_002_src_data;                                                   // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                  // rsp_demux:sink_ready -> router_002:src_ready
	wire    [6:0] router_002_src_channel;                                                // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                          // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                            // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          hex_03_avalon_parallel_port_slave_agent_rp_valid;                      // hex_03_avalon_parallel_port_slave_agent:rp_valid -> router_003:sink_valid
	wire  [105:0] hex_03_avalon_parallel_port_slave_agent_rp_data;                       // hex_03_avalon_parallel_port_slave_agent:rp_data -> router_003:sink_data
	wire          hex_03_avalon_parallel_port_slave_agent_rp_ready;                      // router_003:sink_ready -> hex_03_avalon_parallel_port_slave_agent:rp_ready
	wire          hex_03_avalon_parallel_port_slave_agent_rp_startofpacket;              // hex_03_avalon_parallel_port_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          hex_03_avalon_parallel_port_slave_agent_rp_endofpacket;                // hex_03_avalon_parallel_port_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                  // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [105:0] router_003_src_data;                                                   // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                  // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [6:0] router_003_src_channel;                                                // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                          // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                            // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          hex_47_avalon_parallel_port_slave_agent_rp_valid;                      // hex_47_avalon_parallel_port_slave_agent:rp_valid -> router_004:sink_valid
	wire  [105:0] hex_47_avalon_parallel_port_slave_agent_rp_data;                       // hex_47_avalon_parallel_port_slave_agent:rp_data -> router_004:sink_data
	wire          hex_47_avalon_parallel_port_slave_agent_rp_ready;                      // router_004:sink_ready -> hex_47_avalon_parallel_port_slave_agent:rp_ready
	wire          hex_47_avalon_parallel_port_slave_agent_rp_startofpacket;              // hex_47_avalon_parallel_port_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          hex_47_avalon_parallel_port_slave_agent_rp_endofpacket;                // hex_47_avalon_parallel_port_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                  // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [105:0] router_004_src_data;                                                   // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                  // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [6:0] router_004_src_channel;                                                // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                          // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                            // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          key_avalon_parallel_port_slave_agent_rp_valid;                         // key_avalon_parallel_port_slave_agent:rp_valid -> router_005:sink_valid
	wire  [105:0] key_avalon_parallel_port_slave_agent_rp_data;                          // key_avalon_parallel_port_slave_agent:rp_data -> router_005:sink_data
	wire          key_avalon_parallel_port_slave_agent_rp_ready;                         // router_005:sink_ready -> key_avalon_parallel_port_slave_agent:rp_ready
	wire          key_avalon_parallel_port_slave_agent_rp_startofpacket;                 // key_avalon_parallel_port_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          key_avalon_parallel_port_slave_agent_rp_endofpacket;                   // key_avalon_parallel_port_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                  // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [105:0] router_005_src_data;                                                   // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                  // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [6:0] router_005_src_channel;                                                // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                          // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                            // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          switch_avalon_parallel_port_slave_agent_rp_valid;                      // switch_avalon_parallel_port_slave_agent:rp_valid -> router_006:sink_valid
	wire  [105:0] switch_avalon_parallel_port_slave_agent_rp_data;                       // switch_avalon_parallel_port_slave_agent:rp_data -> router_006:sink_data
	wire          switch_avalon_parallel_port_slave_agent_rp_ready;                      // router_006:sink_ready -> switch_avalon_parallel_port_slave_agent:rp_ready
	wire          switch_avalon_parallel_port_slave_agent_rp_startofpacket;              // switch_avalon_parallel_port_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          switch_avalon_parallel_port_slave_agent_rp_endofpacket;                // switch_avalon_parallel_port_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                  // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [105:0] router_006_src_data;                                                   // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                  // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [6:0] router_006_src_channel;                                                // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                          // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                            // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          led_g_avalon_parallel_port_slave_agent_rp_valid;                       // led_g_avalon_parallel_port_slave_agent:rp_valid -> router_007:sink_valid
	wire  [105:0] led_g_avalon_parallel_port_slave_agent_rp_data;                        // led_g_avalon_parallel_port_slave_agent:rp_data -> router_007:sink_data
	wire          led_g_avalon_parallel_port_slave_agent_rp_ready;                       // router_007:sink_ready -> led_g_avalon_parallel_port_slave_agent:rp_ready
	wire          led_g_avalon_parallel_port_slave_agent_rp_startofpacket;               // led_g_avalon_parallel_port_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          led_g_avalon_parallel_port_slave_agent_rp_endofpacket;                 // led_g_avalon_parallel_port_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                  // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [105:0] router_007_src_data;                                                   // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                  // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [6:0] router_007_src_channel;                                                // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                          // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                            // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          sdram_controller_s1_agent_rp_valid;                                    // sdram_controller_s1_agent:rp_valid -> router_008:sink_valid
	wire  [105:0] sdram_controller_s1_agent_rp_data;                                     // sdram_controller_s1_agent:rp_data -> router_008:sink_data
	wire          sdram_controller_s1_agent_rp_ready;                                    // router_008:sink_ready -> sdram_controller_s1_agent:rp_ready
	wire          sdram_controller_s1_agent_rp_startofpacket;                            // sdram_controller_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          sdram_controller_s1_agent_rp_endofpacket;                              // sdram_controller_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                  // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [105:0] router_008_src_data;                                                   // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                  // rsp_demux_006:sink_ready -> router_008:src_ready
	wire    [6:0] router_008_src_channel;                                                // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                          // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                            // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_src_valid;                                                      // router:src_valid -> mm_bridge_m0_limiter:cmd_sink_valid
	wire  [105:0] router_src_data;                                                       // router:src_data -> mm_bridge_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                      // mm_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [6:0] router_src_channel;                                                    // router:src_channel -> mm_bridge_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                              // router:src_startofpacket -> mm_bridge_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                // router:src_endofpacket -> mm_bridge_m0_limiter:cmd_sink_endofpacket
	wire  [105:0] mm_bridge_m0_limiter_cmd_src_data;                                     // mm_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mm_bridge_m0_limiter_cmd_src_ready;                                    // cmd_demux:sink_ready -> mm_bridge_m0_limiter:cmd_src_ready
	wire    [6:0] mm_bridge_m0_limiter_cmd_src_channel;                                  // mm_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mm_bridge_m0_limiter_cmd_src_startofpacket;                            // mm_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mm_bridge_m0_limiter_cmd_src_endofpacket;                              // mm_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> mm_bridge_m0_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> mm_bridge_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                     // mm_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [6:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> mm_bridge_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> mm_bridge_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> mm_bridge_m0_limiter:rsp_sink_endofpacket
	wire          mm_bridge_m0_limiter_rsp_src_valid;                                    // mm_bridge_m0_limiter:rsp_src_valid -> mm_bridge_m0_agent:rp_valid
	wire  [105:0] mm_bridge_m0_limiter_rsp_src_data;                                     // mm_bridge_m0_limiter:rsp_src_data -> mm_bridge_m0_agent:rp_data
	wire          mm_bridge_m0_limiter_rsp_src_ready;                                    // mm_bridge_m0_agent:rp_ready -> mm_bridge_m0_limiter:rsp_src_ready
	wire    [6:0] mm_bridge_m0_limiter_rsp_src_channel;                                  // mm_bridge_m0_limiter:rsp_src_channel -> mm_bridge_m0_agent:rp_channel
	wire          mm_bridge_m0_limiter_rsp_src_startofpacket;                            // mm_bridge_m0_limiter:rsp_src_startofpacket -> mm_bridge_m0_agent:rp_startofpacket
	wire          mm_bridge_m0_limiter_rsp_src_endofpacket;                              // mm_bridge_m0_limiter:rsp_src_endofpacket -> mm_bridge_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                  // router_001:src_valid -> jtag_master_master_limiter:cmd_sink_valid
	wire  [105:0] router_001_src_data;                                                   // router_001:src_data -> jtag_master_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                  // jtag_master_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [6:0] router_001_src_channel;                                                // router_001:src_channel -> jtag_master_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                          // router_001:src_startofpacket -> jtag_master_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                            // router_001:src_endofpacket -> jtag_master_master_limiter:cmd_sink_endofpacket
	wire  [105:0] jtag_master_master_limiter_cmd_src_data;                               // jtag_master_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          jtag_master_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> jtag_master_master_limiter:cmd_src_ready
	wire    [6:0] jtag_master_master_limiter_cmd_src_channel;                            // jtag_master_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          jtag_master_master_limiter_cmd_src_startofpacket;                      // jtag_master_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          jtag_master_master_limiter_cmd_src_endofpacket;                        // jtag_master_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                 // rsp_mux_001:src_valid -> jtag_master_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_001_src_data;                                                  // rsp_mux_001:src_data -> jtag_master_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                 // jtag_master_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [6:0] rsp_mux_001_src_channel;                                               // rsp_mux_001:src_channel -> jtag_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                         // rsp_mux_001:src_startofpacket -> jtag_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                           // rsp_mux_001:src_endofpacket -> jtag_master_master_limiter:rsp_sink_endofpacket
	wire          jtag_master_master_limiter_rsp_src_valid;                              // jtag_master_master_limiter:rsp_src_valid -> jtag_master_master_agent:rp_valid
	wire  [105:0] jtag_master_master_limiter_rsp_src_data;                               // jtag_master_master_limiter:rsp_src_data -> jtag_master_master_agent:rp_data
	wire          jtag_master_master_limiter_rsp_src_ready;                              // jtag_master_master_agent:rp_ready -> jtag_master_master_limiter:rsp_src_ready
	wire    [6:0] jtag_master_master_limiter_rsp_src_channel;                            // jtag_master_master_limiter:rsp_src_channel -> jtag_master_master_agent:rp_channel
	wire          jtag_master_master_limiter_rsp_src_startofpacket;                      // jtag_master_master_limiter:rsp_src_startofpacket -> jtag_master_master_agent:rp_startofpacket
	wire          jtag_master_master_limiter_rsp_src_endofpacket;                        // jtag_master_master_limiter:rsp_src_endofpacket -> jtag_master_master_agent:rp_endofpacket
	wire          cmd_demux_src6_valid;                                                  // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [105:0] cmd_demux_src6_data;                                                   // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                  // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire    [6:0] cmd_demux_src6_channel;                                                // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                          // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                            // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                              // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [105:0] cmd_demux_001_src6_data;                                               // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                              // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire    [6:0] cmd_demux_001_src6_channel;                                            // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                      // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                        // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          rsp_demux_006_src0_valid;                                              // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [105:0] rsp_demux_006_src0_data;                                               // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                              // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [6:0] rsp_demux_006_src0_channel;                                            // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                      // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                        // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                              // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [105:0] rsp_demux_006_src1_data;                                               // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                              // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire    [6:0] rsp_demux_006_src1_channel;                                            // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                      // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                        // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> crosser:in_valid
	wire  [105:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                  // crosser:in_ready -> cmd_demux:src0_ready
	wire    [6:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                     // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [105:0] crosser_out_data;                                                      // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                     // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [6:0] crosser_out_channel;                                                   // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                             // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                               // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                  // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [105:0] cmd_demux_src1_data;                                                   // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                  // crosser_001:in_ready -> cmd_demux:src1_ready
	wire    [6:0] cmd_demux_src1_channel;                                                // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                          // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                            // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                 // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [105:0] crosser_001_out_data;                                                  // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                 // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire    [6:0] crosser_001_out_channel;                                               // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                         // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                           // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                  // cmd_demux:src2_valid -> crosser_002:in_valid
	wire  [105:0] cmd_demux_src2_data;                                                   // cmd_demux:src2_data -> crosser_002:in_data
	wire          cmd_demux_src2_ready;                                                  // crosser_002:in_ready -> cmd_demux:src2_ready
	wire    [6:0] cmd_demux_src2_channel;                                                // cmd_demux:src2_channel -> crosser_002:in_channel
	wire          cmd_demux_src2_startofpacket;                                          // cmd_demux:src2_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                            // cmd_demux:src2_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                 // crosser_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [105:0] crosser_002_out_data;                                                  // crosser_002:out_data -> cmd_mux_002:sink0_data
	wire          crosser_002_out_ready;                                                 // cmd_mux_002:sink0_ready -> crosser_002:out_ready
	wire    [6:0] crosser_002_out_channel;                                               // crosser_002:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_002_out_startofpacket;                                         // crosser_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                           // crosser_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                  // cmd_demux:src3_valid -> crosser_003:in_valid
	wire  [105:0] cmd_demux_src3_data;                                                   // cmd_demux:src3_data -> crosser_003:in_data
	wire          cmd_demux_src3_ready;                                                  // crosser_003:in_ready -> cmd_demux:src3_ready
	wire    [6:0] cmd_demux_src3_channel;                                                // cmd_demux:src3_channel -> crosser_003:in_channel
	wire          cmd_demux_src3_startofpacket;                                          // cmd_demux:src3_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                            // cmd_demux:src3_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                 // crosser_003:out_valid -> cmd_mux_003:sink0_valid
	wire  [105:0] crosser_003_out_data;                                                  // crosser_003:out_data -> cmd_mux_003:sink0_data
	wire          crosser_003_out_ready;                                                 // cmd_mux_003:sink0_ready -> crosser_003:out_ready
	wire    [6:0] crosser_003_out_channel;                                               // crosser_003:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_003_out_startofpacket;                                         // crosser_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                           // crosser_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                  // cmd_demux:src4_valid -> crosser_004:in_valid
	wire  [105:0] cmd_demux_src4_data;                                                   // cmd_demux:src4_data -> crosser_004:in_data
	wire          cmd_demux_src4_ready;                                                  // crosser_004:in_ready -> cmd_demux:src4_ready
	wire    [6:0] cmd_demux_src4_channel;                                                // cmd_demux:src4_channel -> crosser_004:in_channel
	wire          cmd_demux_src4_startofpacket;                                          // cmd_demux:src4_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                            // cmd_demux:src4_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                 // crosser_004:out_valid -> cmd_mux_004:sink0_valid
	wire  [105:0] crosser_004_out_data;                                                  // crosser_004:out_data -> cmd_mux_004:sink0_data
	wire          crosser_004_out_ready;                                                 // cmd_mux_004:sink0_ready -> crosser_004:out_ready
	wire    [6:0] crosser_004_out_channel;                                               // crosser_004:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_004_out_startofpacket;                                         // crosser_004:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                           // crosser_004:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                  // cmd_demux:src5_valid -> crosser_005:in_valid
	wire  [105:0] cmd_demux_src5_data;                                                   // cmd_demux:src5_data -> crosser_005:in_data
	wire          cmd_demux_src5_ready;                                                  // crosser_005:in_ready -> cmd_demux:src5_ready
	wire    [6:0] cmd_demux_src5_channel;                                                // cmd_demux:src5_channel -> crosser_005:in_channel
	wire          cmd_demux_src5_startofpacket;                                          // cmd_demux:src5_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                            // cmd_demux:src5_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                 // crosser_005:out_valid -> cmd_mux_005:sink0_valid
	wire  [105:0] crosser_005_out_data;                                                  // crosser_005:out_data -> cmd_mux_005:sink0_data
	wire          crosser_005_out_ready;                                                 // cmd_mux_005:sink0_ready -> crosser_005:out_ready
	wire    [6:0] crosser_005_out_channel;                                               // crosser_005:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_005_out_startofpacket;                                         // crosser_005:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                           // crosser_005:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                              // cmd_demux_001:src0_valid -> crosser_006:in_valid
	wire  [105:0] cmd_demux_001_src0_data;                                               // cmd_demux_001:src0_data -> crosser_006:in_data
	wire          cmd_demux_001_src0_ready;                                              // crosser_006:in_ready -> cmd_demux_001:src0_ready
	wire    [6:0] cmd_demux_001_src0_channel;                                            // cmd_demux_001:src0_channel -> crosser_006:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                      // cmd_demux_001:src0_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                        // cmd_demux_001:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                 // crosser_006:out_valid -> cmd_mux:sink1_valid
	wire  [105:0] crosser_006_out_data;                                                  // crosser_006:out_data -> cmd_mux:sink1_data
	wire          crosser_006_out_ready;                                                 // cmd_mux:sink1_ready -> crosser_006:out_ready
	wire    [6:0] crosser_006_out_channel;                                               // crosser_006:out_channel -> cmd_mux:sink1_channel
	wire          crosser_006_out_startofpacket;                                         // crosser_006:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_006_out_endofpacket;                                           // crosser_006:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                              // cmd_demux_001:src1_valid -> crosser_007:in_valid
	wire  [105:0] cmd_demux_001_src1_data;                                               // cmd_demux_001:src1_data -> crosser_007:in_data
	wire          cmd_demux_001_src1_ready;                                              // crosser_007:in_ready -> cmd_demux_001:src1_ready
	wire    [6:0] cmd_demux_001_src1_channel;                                            // cmd_demux_001:src1_channel -> crosser_007:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                      // cmd_demux_001:src1_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                        // cmd_demux_001:src1_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                 // crosser_007:out_valid -> cmd_mux_001:sink1_valid
	wire  [105:0] crosser_007_out_data;                                                  // crosser_007:out_data -> cmd_mux_001:sink1_data
	wire          crosser_007_out_ready;                                                 // cmd_mux_001:sink1_ready -> crosser_007:out_ready
	wire    [6:0] crosser_007_out_channel;                                               // crosser_007:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_007_out_startofpacket;                                         // crosser_007:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_007_out_endofpacket;                                           // crosser_007:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                              // cmd_demux_001:src2_valid -> crosser_008:in_valid
	wire  [105:0] cmd_demux_001_src2_data;                                               // cmd_demux_001:src2_data -> crosser_008:in_data
	wire          cmd_demux_001_src2_ready;                                              // crosser_008:in_ready -> cmd_demux_001:src2_ready
	wire    [6:0] cmd_demux_001_src2_channel;                                            // cmd_demux_001:src2_channel -> crosser_008:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                      // cmd_demux_001:src2_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                        // cmd_demux_001:src2_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                 // crosser_008:out_valid -> cmd_mux_002:sink1_valid
	wire  [105:0] crosser_008_out_data;                                                  // crosser_008:out_data -> cmd_mux_002:sink1_data
	wire          crosser_008_out_ready;                                                 // cmd_mux_002:sink1_ready -> crosser_008:out_ready
	wire    [6:0] crosser_008_out_channel;                                               // crosser_008:out_channel -> cmd_mux_002:sink1_channel
	wire          crosser_008_out_startofpacket;                                         // crosser_008:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          crosser_008_out_endofpacket;                                           // crosser_008:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                              // cmd_demux_001:src3_valid -> crosser_009:in_valid
	wire  [105:0] cmd_demux_001_src3_data;                                               // cmd_demux_001:src3_data -> crosser_009:in_data
	wire          cmd_demux_001_src3_ready;                                              // crosser_009:in_ready -> cmd_demux_001:src3_ready
	wire    [6:0] cmd_demux_001_src3_channel;                                            // cmd_demux_001:src3_channel -> crosser_009:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                      // cmd_demux_001:src3_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                        // cmd_demux_001:src3_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                 // crosser_009:out_valid -> cmd_mux_003:sink1_valid
	wire  [105:0] crosser_009_out_data;                                                  // crosser_009:out_data -> cmd_mux_003:sink1_data
	wire          crosser_009_out_ready;                                                 // cmd_mux_003:sink1_ready -> crosser_009:out_ready
	wire    [6:0] crosser_009_out_channel;                                               // crosser_009:out_channel -> cmd_mux_003:sink1_channel
	wire          crosser_009_out_startofpacket;                                         // crosser_009:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          crosser_009_out_endofpacket;                                           // crosser_009:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                              // cmd_demux_001:src4_valid -> crosser_010:in_valid
	wire  [105:0] cmd_demux_001_src4_data;                                               // cmd_demux_001:src4_data -> crosser_010:in_data
	wire          cmd_demux_001_src4_ready;                                              // crosser_010:in_ready -> cmd_demux_001:src4_ready
	wire    [6:0] cmd_demux_001_src4_channel;                                            // cmd_demux_001:src4_channel -> crosser_010:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                      // cmd_demux_001:src4_startofpacket -> crosser_010:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                        // cmd_demux_001:src4_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                 // crosser_010:out_valid -> cmd_mux_004:sink1_valid
	wire  [105:0] crosser_010_out_data;                                                  // crosser_010:out_data -> cmd_mux_004:sink1_data
	wire          crosser_010_out_ready;                                                 // cmd_mux_004:sink1_ready -> crosser_010:out_ready
	wire    [6:0] crosser_010_out_channel;                                               // crosser_010:out_channel -> cmd_mux_004:sink1_channel
	wire          crosser_010_out_startofpacket;                                         // crosser_010:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          crosser_010_out_endofpacket;                                           // crosser_010:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                              // cmd_demux_001:src5_valid -> crosser_011:in_valid
	wire  [105:0] cmd_demux_001_src5_data;                                               // cmd_demux_001:src5_data -> crosser_011:in_data
	wire          cmd_demux_001_src5_ready;                                              // crosser_011:in_ready -> cmd_demux_001:src5_ready
	wire    [6:0] cmd_demux_001_src5_channel;                                            // cmd_demux_001:src5_channel -> crosser_011:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                      // cmd_demux_001:src5_startofpacket -> crosser_011:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                        // cmd_demux_001:src5_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                 // crosser_011:out_valid -> cmd_mux_005:sink1_valid
	wire  [105:0] crosser_011_out_data;                                                  // crosser_011:out_data -> cmd_mux_005:sink1_data
	wire          crosser_011_out_ready;                                                 // cmd_mux_005:sink1_ready -> crosser_011:out_ready
	wire    [6:0] crosser_011_out_channel;                                               // crosser_011:out_channel -> cmd_mux_005:sink1_channel
	wire          crosser_011_out_startofpacket;                                         // crosser_011:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          crosser_011_out_endofpacket;                                           // crosser_011:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> crosser_012:in_valid
	wire  [105:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> crosser_012:in_data
	wire          rsp_demux_src0_ready;                                                  // crosser_012:in_ready -> rsp_demux:src0_ready
	wire    [6:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> crosser_012:in_channel
	wire          rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                 // crosser_012:out_valid -> rsp_mux:sink0_valid
	wire  [105:0] crosser_012_out_data;                                                  // crosser_012:out_data -> rsp_mux:sink0_data
	wire          crosser_012_out_ready;                                                 // rsp_mux:sink0_ready -> crosser_012:out_ready
	wire    [6:0] crosser_012_out_channel;                                               // crosser_012:out_channel -> rsp_mux:sink0_channel
	wire          crosser_012_out_startofpacket;                                         // crosser_012:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_012_out_endofpacket;                                           // crosser_012:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                  // rsp_demux:src1_valid -> crosser_013:in_valid
	wire  [105:0] rsp_demux_src1_data;                                                   // rsp_demux:src1_data -> crosser_013:in_data
	wire          rsp_demux_src1_ready;                                                  // crosser_013:in_ready -> rsp_demux:src1_ready
	wire    [6:0] rsp_demux_src1_channel;                                                // rsp_demux:src1_channel -> crosser_013:in_channel
	wire          rsp_demux_src1_startofpacket;                                          // rsp_demux:src1_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                            // rsp_demux:src1_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                 // crosser_013:out_valid -> rsp_mux_001:sink0_valid
	wire  [105:0] crosser_013_out_data;                                                  // crosser_013:out_data -> rsp_mux_001:sink0_data
	wire          crosser_013_out_ready;                                                 // rsp_mux_001:sink0_ready -> crosser_013:out_ready
	wire    [6:0] crosser_013_out_channel;                                               // crosser_013:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_013_out_startofpacket;                                         // crosser_013:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                                           // crosser_013:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                              // rsp_demux_001:src0_valid -> crosser_014:in_valid
	wire  [105:0] rsp_demux_001_src0_data;                                               // rsp_demux_001:src0_data -> crosser_014:in_data
	wire          rsp_demux_001_src0_ready;                                              // crosser_014:in_ready -> rsp_demux_001:src0_ready
	wire    [6:0] rsp_demux_001_src0_channel;                                            // rsp_demux_001:src0_channel -> crosser_014:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                      // rsp_demux_001:src0_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                        // rsp_demux_001:src0_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                 // crosser_014:out_valid -> rsp_mux:sink1_valid
	wire  [105:0] crosser_014_out_data;                                                  // crosser_014:out_data -> rsp_mux:sink1_data
	wire          crosser_014_out_ready;                                                 // rsp_mux:sink1_ready -> crosser_014:out_ready
	wire    [6:0] crosser_014_out_channel;                                               // crosser_014:out_channel -> rsp_mux:sink1_channel
	wire          crosser_014_out_startofpacket;                                         // crosser_014:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_014_out_endofpacket;                                           // crosser_014:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                              // rsp_demux_001:src1_valid -> crosser_015:in_valid
	wire  [105:0] rsp_demux_001_src1_data;                                               // rsp_demux_001:src1_data -> crosser_015:in_data
	wire          rsp_demux_001_src1_ready;                                              // crosser_015:in_ready -> rsp_demux_001:src1_ready
	wire    [6:0] rsp_demux_001_src1_channel;                                            // rsp_demux_001:src1_channel -> crosser_015:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                      // rsp_demux_001:src1_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                        // rsp_demux_001:src1_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                 // crosser_015:out_valid -> rsp_mux_001:sink1_valid
	wire  [105:0] crosser_015_out_data;                                                  // crosser_015:out_data -> rsp_mux_001:sink1_data
	wire          crosser_015_out_ready;                                                 // rsp_mux_001:sink1_ready -> crosser_015:out_ready
	wire    [6:0] crosser_015_out_channel;                                               // crosser_015:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_015_out_startofpacket;                                         // crosser_015:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_015_out_endofpacket;                                           // crosser_015:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                              // rsp_demux_002:src0_valid -> crosser_016:in_valid
	wire  [105:0] rsp_demux_002_src0_data;                                               // rsp_demux_002:src0_data -> crosser_016:in_data
	wire          rsp_demux_002_src0_ready;                                              // crosser_016:in_ready -> rsp_demux_002:src0_ready
	wire    [6:0] rsp_demux_002_src0_channel;                                            // rsp_demux_002:src0_channel -> crosser_016:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                      // rsp_demux_002:src0_startofpacket -> crosser_016:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                        // rsp_demux_002:src0_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                 // crosser_016:out_valid -> rsp_mux:sink2_valid
	wire  [105:0] crosser_016_out_data;                                                  // crosser_016:out_data -> rsp_mux:sink2_data
	wire          crosser_016_out_ready;                                                 // rsp_mux:sink2_ready -> crosser_016:out_ready
	wire    [6:0] crosser_016_out_channel;                                               // crosser_016:out_channel -> rsp_mux:sink2_channel
	wire          crosser_016_out_startofpacket;                                         // crosser_016:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_016_out_endofpacket;                                           // crosser_016:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                              // rsp_demux_002:src1_valid -> crosser_017:in_valid
	wire  [105:0] rsp_demux_002_src1_data;                                               // rsp_demux_002:src1_data -> crosser_017:in_data
	wire          rsp_demux_002_src1_ready;                                              // crosser_017:in_ready -> rsp_demux_002:src1_ready
	wire    [6:0] rsp_demux_002_src1_channel;                                            // rsp_demux_002:src1_channel -> crosser_017:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                      // rsp_demux_002:src1_startofpacket -> crosser_017:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                        // rsp_demux_002:src1_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                 // crosser_017:out_valid -> rsp_mux_001:sink2_valid
	wire  [105:0] crosser_017_out_data;                                                  // crosser_017:out_data -> rsp_mux_001:sink2_data
	wire          crosser_017_out_ready;                                                 // rsp_mux_001:sink2_ready -> crosser_017:out_ready
	wire    [6:0] crosser_017_out_channel;                                               // crosser_017:out_channel -> rsp_mux_001:sink2_channel
	wire          crosser_017_out_startofpacket;                                         // crosser_017:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          crosser_017_out_endofpacket;                                           // crosser_017:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                              // rsp_demux_003:src0_valid -> crosser_018:in_valid
	wire  [105:0] rsp_demux_003_src0_data;                                               // rsp_demux_003:src0_data -> crosser_018:in_data
	wire          rsp_demux_003_src0_ready;                                              // crosser_018:in_ready -> rsp_demux_003:src0_ready
	wire    [6:0] rsp_demux_003_src0_channel;                                            // rsp_demux_003:src0_channel -> crosser_018:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                      // rsp_demux_003:src0_startofpacket -> crosser_018:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                        // rsp_demux_003:src0_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                 // crosser_018:out_valid -> rsp_mux:sink3_valid
	wire  [105:0] crosser_018_out_data;                                                  // crosser_018:out_data -> rsp_mux:sink3_data
	wire          crosser_018_out_ready;                                                 // rsp_mux:sink3_ready -> crosser_018:out_ready
	wire    [6:0] crosser_018_out_channel;                                               // crosser_018:out_channel -> rsp_mux:sink3_channel
	wire          crosser_018_out_startofpacket;                                         // crosser_018:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_018_out_endofpacket;                                           // crosser_018:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                              // rsp_demux_003:src1_valid -> crosser_019:in_valid
	wire  [105:0] rsp_demux_003_src1_data;                                               // rsp_demux_003:src1_data -> crosser_019:in_data
	wire          rsp_demux_003_src1_ready;                                              // crosser_019:in_ready -> rsp_demux_003:src1_ready
	wire    [6:0] rsp_demux_003_src1_channel;                                            // rsp_demux_003:src1_channel -> crosser_019:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                      // rsp_demux_003:src1_startofpacket -> crosser_019:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                        // rsp_demux_003:src1_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                 // crosser_019:out_valid -> rsp_mux_001:sink3_valid
	wire  [105:0] crosser_019_out_data;                                                  // crosser_019:out_data -> rsp_mux_001:sink3_data
	wire          crosser_019_out_ready;                                                 // rsp_mux_001:sink3_ready -> crosser_019:out_ready
	wire    [6:0] crosser_019_out_channel;                                               // crosser_019:out_channel -> rsp_mux_001:sink3_channel
	wire          crosser_019_out_startofpacket;                                         // crosser_019:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          crosser_019_out_endofpacket;                                           // crosser_019:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                              // rsp_demux_004:src0_valid -> crosser_020:in_valid
	wire  [105:0] rsp_demux_004_src0_data;                                               // rsp_demux_004:src0_data -> crosser_020:in_data
	wire          rsp_demux_004_src0_ready;                                              // crosser_020:in_ready -> rsp_demux_004:src0_ready
	wire    [6:0] rsp_demux_004_src0_channel;                                            // rsp_demux_004:src0_channel -> crosser_020:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                      // rsp_demux_004:src0_startofpacket -> crosser_020:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                        // rsp_demux_004:src0_endofpacket -> crosser_020:in_endofpacket
	wire          crosser_020_out_valid;                                                 // crosser_020:out_valid -> rsp_mux:sink4_valid
	wire  [105:0] crosser_020_out_data;                                                  // crosser_020:out_data -> rsp_mux:sink4_data
	wire          crosser_020_out_ready;                                                 // rsp_mux:sink4_ready -> crosser_020:out_ready
	wire    [6:0] crosser_020_out_channel;                                               // crosser_020:out_channel -> rsp_mux:sink4_channel
	wire          crosser_020_out_startofpacket;                                         // crosser_020:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_020_out_endofpacket;                                           // crosser_020:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                              // rsp_demux_004:src1_valid -> crosser_021:in_valid
	wire  [105:0] rsp_demux_004_src1_data;                                               // rsp_demux_004:src1_data -> crosser_021:in_data
	wire          rsp_demux_004_src1_ready;                                              // crosser_021:in_ready -> rsp_demux_004:src1_ready
	wire    [6:0] rsp_demux_004_src1_channel;                                            // rsp_demux_004:src1_channel -> crosser_021:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                      // rsp_demux_004:src1_startofpacket -> crosser_021:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                        // rsp_demux_004:src1_endofpacket -> crosser_021:in_endofpacket
	wire          crosser_021_out_valid;                                                 // crosser_021:out_valid -> rsp_mux_001:sink4_valid
	wire  [105:0] crosser_021_out_data;                                                  // crosser_021:out_data -> rsp_mux_001:sink4_data
	wire          crosser_021_out_ready;                                                 // rsp_mux_001:sink4_ready -> crosser_021:out_ready
	wire    [6:0] crosser_021_out_channel;                                               // crosser_021:out_channel -> rsp_mux_001:sink4_channel
	wire          crosser_021_out_startofpacket;                                         // crosser_021:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          crosser_021_out_endofpacket;                                           // crosser_021:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                              // rsp_demux_005:src0_valid -> crosser_022:in_valid
	wire  [105:0] rsp_demux_005_src0_data;                                               // rsp_demux_005:src0_data -> crosser_022:in_data
	wire          rsp_demux_005_src0_ready;                                              // crosser_022:in_ready -> rsp_demux_005:src0_ready
	wire    [6:0] rsp_demux_005_src0_channel;                                            // rsp_demux_005:src0_channel -> crosser_022:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                      // rsp_demux_005:src0_startofpacket -> crosser_022:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                        // rsp_demux_005:src0_endofpacket -> crosser_022:in_endofpacket
	wire          crosser_022_out_valid;                                                 // crosser_022:out_valid -> rsp_mux:sink5_valid
	wire  [105:0] crosser_022_out_data;                                                  // crosser_022:out_data -> rsp_mux:sink5_data
	wire          crosser_022_out_ready;                                                 // rsp_mux:sink5_ready -> crosser_022:out_ready
	wire    [6:0] crosser_022_out_channel;                                               // crosser_022:out_channel -> rsp_mux:sink5_channel
	wire          crosser_022_out_startofpacket;                                         // crosser_022:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_022_out_endofpacket;                                           // crosser_022:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                              // rsp_demux_005:src1_valid -> crosser_023:in_valid
	wire  [105:0] rsp_demux_005_src1_data;                                               // rsp_demux_005:src1_data -> crosser_023:in_data
	wire          rsp_demux_005_src1_ready;                                              // crosser_023:in_ready -> rsp_demux_005:src1_ready
	wire    [6:0] rsp_demux_005_src1_channel;                                            // rsp_demux_005:src1_channel -> crosser_023:in_channel
	wire          rsp_demux_005_src1_startofpacket;                                      // rsp_demux_005:src1_startofpacket -> crosser_023:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                        // rsp_demux_005:src1_endofpacket -> crosser_023:in_endofpacket
	wire          crosser_023_out_valid;                                                 // crosser_023:out_valid -> rsp_mux_001:sink5_valid
	wire  [105:0] crosser_023_out_data;                                                  // crosser_023:out_data -> rsp_mux_001:sink5_data
	wire          crosser_023_out_ready;                                                 // rsp_mux_001:sink5_ready -> crosser_023:out_ready
	wire    [6:0] crosser_023_out_channel;                                               // crosser_023:out_channel -> rsp_mux_001:sink5_channel
	wire          crosser_023_out_startofpacket;                                         // crosser_023:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          crosser_023_out_endofpacket;                                           // crosser_023:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire    [6:0] mm_bridge_m0_limiter_cmd_valid_data;                                   // mm_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [6:0] jtag_master_master_limiter_cmd_valid_data;                             // jtag_master_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          led_r_avalon_parallel_port_slave_agent_rdata_fifo_out_valid;           // led_r_avalon_parallel_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] led_r_avalon_parallel_port_slave_agent_rdata_fifo_out_data;            // led_r_avalon_parallel_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          led_r_avalon_parallel_port_slave_agent_rdata_fifo_out_ready;           // avalon_st_adapter:in_0_ready -> led_r_avalon_parallel_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                         // avalon_st_adapter:out_0_valid -> led_r_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                          // avalon_st_adapter:out_0_data -> led_r_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                         // led_r_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                         // avalon_st_adapter:out_0_error -> led_r_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          hex_03_avalon_parallel_port_slave_agent_rdata_fifo_out_valid;          // hex_03_avalon_parallel_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] hex_03_avalon_parallel_port_slave_agent_rdata_fifo_out_data;           // hex_03_avalon_parallel_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          hex_03_avalon_parallel_port_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_001:in_0_ready -> hex_03_avalon_parallel_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                     // avalon_st_adapter_001:out_0_valid -> hex_03_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                      // avalon_st_adapter_001:out_0_data -> hex_03_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                     // hex_03_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                     // avalon_st_adapter_001:out_0_error -> hex_03_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          hex_47_avalon_parallel_port_slave_agent_rdata_fifo_out_valid;          // hex_47_avalon_parallel_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] hex_47_avalon_parallel_port_slave_agent_rdata_fifo_out_data;           // hex_47_avalon_parallel_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          hex_47_avalon_parallel_port_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_002:in_0_ready -> hex_47_avalon_parallel_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                     // avalon_st_adapter_002:out_0_valid -> hex_47_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                      // avalon_st_adapter_002:out_0_data -> hex_47_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                     // hex_47_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                     // avalon_st_adapter_002:out_0_error -> hex_47_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          key_avalon_parallel_port_slave_agent_rdata_fifo_out_valid;             // key_avalon_parallel_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] key_avalon_parallel_port_slave_agent_rdata_fifo_out_data;              // key_avalon_parallel_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          key_avalon_parallel_port_slave_agent_rdata_fifo_out_ready;             // avalon_st_adapter_003:in_0_ready -> key_avalon_parallel_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                     // avalon_st_adapter_003:out_0_valid -> key_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                      // avalon_st_adapter_003:out_0_data -> key_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                     // key_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                     // avalon_st_adapter_003:out_0_error -> key_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          switch_avalon_parallel_port_slave_agent_rdata_fifo_out_valid;          // switch_avalon_parallel_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] switch_avalon_parallel_port_slave_agent_rdata_fifo_out_data;           // switch_avalon_parallel_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          switch_avalon_parallel_port_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_004:in_0_ready -> switch_avalon_parallel_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                     // avalon_st_adapter_004:out_0_valid -> switch_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                      // avalon_st_adapter_004:out_0_data -> switch_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                     // switch_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                     // avalon_st_adapter_004:out_0_error -> switch_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          led_g_avalon_parallel_port_slave_agent_rdata_fifo_out_valid;           // led_g_avalon_parallel_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] led_g_avalon_parallel_port_slave_agent_rdata_fifo_out_data;            // led_g_avalon_parallel_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          led_g_avalon_parallel_port_slave_agent_rdata_fifo_out_ready;           // avalon_st_adapter_005:in_0_ready -> led_g_avalon_parallel_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                     // avalon_st_adapter_005:out_0_valid -> led_g_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                      // avalon_st_adapter_005:out_0_data -> led_g_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                     // led_g_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                     // avalon_st_adapter_005:out_0_error -> led_g_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          sdram_controller_s1_agent_rdata_fifo_src_valid;                        // sdram_controller_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] sdram_controller_s1_agent_rdata_fifo_src_data;                         // sdram_controller_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          sdram_controller_s1_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_006:in_0_ready -> sdram_controller_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                     // avalon_st_adapter_006:out_0_valid -> sdram_controller_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                      // avalon_st_adapter_006:out_0_data -> sdram_controller_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                     // sdram_controller_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                     // avalon_st_adapter_006:out_0_error -> sdram_controller_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_m0_translator (
		.clk                    (sdram_pll_sys_clk_clk),                                           //                       clk.clk
		.reset                  (mm_bridge_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (mm_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                            //               (terminated)
		.av_lock                (1'b0),                                                            //               (terminated)
		.uav_clken              (),                                                                //               (terminated)
		.av_clken               (1'b1),                                                            //               (terminated)
		.uav_response           (2'b00),                                                           //               (terminated)
		.av_response            (),                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_master_master_translator (
		.clk                    (sdram_pll_sys_clk_clk),                                                 //                       clk.clk
		.reset                  (mm_bridge_reset_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (jtag_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (jtag_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (jtag_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (jtag_master_master_byteenable),                                         //                          .byteenable
		.av_read                (jtag_master_master_read),                                               //                          .read
		.av_readdata            (jtag_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (jtag_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (jtag_master_master_write),                                              //                          .write
		.av_writedata           (jtag_master_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_r_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                           //                      clk.clk
		.reset                  (led_r_reset_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address            (led_r_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (led_r_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (led_r_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (led_r_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (led_r_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (led_r_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (led_r_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (led_r_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (led_r_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (led_r_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (led_r_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (led_r_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (led_r_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (led_r_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (led_r_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (led_r_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (led_r_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (led_r_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_03_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                            //                      clk.clk
		.reset                  (led_r_reset_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address            (hex_03_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hex_03_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hex_03_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (hex_03_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (hex_03_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hex_03_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hex_03_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hex_03_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hex_03_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hex_03_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hex_03_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (hex_03_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (hex_03_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (hex_03_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (hex_03_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (hex_03_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (hex_03_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (hex_03_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_47_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                            //                      clk.clk
		.reset                  (led_r_reset_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address            (hex_47_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hex_47_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hex_47_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (hex_47_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (hex_47_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hex_47_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hex_47_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hex_47_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hex_47_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hex_47_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hex_47_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (hex_47_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (hex_47_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (hex_47_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (hex_47_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (hex_47_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (hex_47_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (hex_47_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                         //                      clk.clk
		.reset                  (led_r_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (key_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (key_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (key_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (key_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (key_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (key_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (key_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (key_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (key_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (key_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (key_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (key_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (key_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (key_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (key_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (key_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (key_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (key_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switch_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                            //                      clk.clk
		.reset                  (led_r_reset_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address            (switch_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (switch_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (switch_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (switch_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (switch_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (switch_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (switch_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (switch_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (switch_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (switch_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (switch_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (switch_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (switch_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (switch_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (switch_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (switch_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (switch_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (switch_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_g_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                           //                      clk.clk
		.reset                  (led_r_reset_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address            (led_g_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (led_g_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (led_g_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (led_g_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (led_g_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (led_g_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (led_g_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (led_g_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (led_g_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (led_g_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (led_g_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (led_g_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (led_g_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (led_g_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (led_g_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (led_g_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (led_g_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (led_g_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_s1_translator (
		.clk                    (sdram_pll_sys_clk_clk),                              //                      clk.clk
		.reset                  (sdram_controller_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_controller_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_controller_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_controller_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_controller_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_controller_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_controller_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_controller_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_controller_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_controller_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_controller_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_controller_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sdram_controller_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sdram_controller_s1_write),                          //                         .write
		.av_read                (sdram_controller_s1_read),                           //                         .read
		.av_readdata            (sdram_controller_s1_readdata),                       //                         .readdata
		.av_writedata           (sdram_controller_s1_writedata),                      //                         .writedata
		.av_byteenable          (sdram_controller_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sdram_controller_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sdram_controller_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (sdram_controller_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_m0_agent (
		.clk                   (sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset                 (mm_bridge_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (mm_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_bridge_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_bridge_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_bridge_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_bridge_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_bridge_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_bridge_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                // (terminated)
		.av_writeresponsevalid ()                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_master_master_agent (
		.clk                   (sdram_pll_sys_clk_clk),                                                 //       clk.clk
		.reset                 (mm_bridge_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (jtag_master_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtag_master_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtag_master_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtag_master_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtag_master_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtag_master_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (jtag_master_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (jtag_master_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (jtag_master_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (jtag_master_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (jtag_master_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (jtag_master_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_r_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (led_r_reset_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (led_r_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (led_r_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (led_r_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (led_r_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (led_r_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (led_r_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (led_r_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (led_r_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (led_r_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (led_r_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (led_r_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (led_r_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (led_r_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (led_r_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (led_r_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (led_r_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                               //                .channel
		.rf_sink_ready           (led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (led_r_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (led_r_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (led_r_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (led_r_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (led_r_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (led_r_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_r_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (led_r_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_r_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                     //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (led_r_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (led_r_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (led_r_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (led_r_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (led_r_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (led_r_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_r_avalon_parallel_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (led_r_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (led_r_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (led_r_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (led_r_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (led_r_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (led_r_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_03_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (led_r_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (hex_03_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_03_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_03_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_03_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_03_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_03_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_03_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_03_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_03_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_03_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_03_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_03_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_03_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_03_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_03_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_03_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                            //                .channel
		.rf_sink_ready           (hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_03_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_03_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_03_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_03_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_03_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_03_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (hex_03_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (hex_03_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_03_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_03_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_03_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_03_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_03_avalon_parallel_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_47_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (led_r_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (hex_47_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_47_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_47_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_47_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_47_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_47_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_47_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_47_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_47_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_47_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_47_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_47_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_47_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_47_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_47_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_47_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                            //                .channel
		.rf_sink_ready           (hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_47_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_47_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_47_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_47_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_47_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_47_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (hex_47_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (hex_47_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_47_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_47_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_47_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_47_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_47_avalon_parallel_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (led_r_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (key_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (key_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (key_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (key_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (key_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (key_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (key_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (key_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (key_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (key_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (key_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (key_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (key_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (key_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (key_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (key_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                         //                .channel
		.rf_sink_ready           (key_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (key_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (key_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (key_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (key_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (key_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (key_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (key_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (key_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (key_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (key_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (key_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (key_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (key_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (key_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (key_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (key_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (key_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (key_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (key_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (key_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (key_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_avalon_parallel_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (key_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (key_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (key_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (key_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (key_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (key_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switch_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (led_r_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (switch_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (switch_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (switch_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (switch_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (switch_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (switch_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (switch_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (switch_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (switch_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (switch_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (switch_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (switch_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (switch_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (switch_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (switch_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (switch_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                            //                .channel
		.rf_sink_ready           (switch_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (switch_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (switch_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (switch_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (switch_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (switch_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (switch_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (switch_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (switch_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (switch_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (switch_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switch_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (switch_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switch_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (switch_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (switch_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (switch_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (switch_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (switch_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (switch_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (switch_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (switch_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (switch_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (switch_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switch_avalon_parallel_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (switch_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (switch_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (switch_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (switch_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (switch_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (switch_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_g_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (led_r_reset_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (led_g_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (led_g_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (led_g_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (led_g_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (led_g_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (led_g_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (led_g_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (led_g_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (led_g_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (led_g_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (led_g_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (led_g_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (led_g_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (led_g_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (led_g_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (led_g_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                           //                .channel
		.rf_sink_ready           (led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (led_g_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (led_g_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (led_g_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (led_g_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (led_g_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (led_g_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_g_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (led_g_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_g_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                     //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (led_g_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (led_g_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (led_g_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (led_g_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (led_g_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (led_g_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_g_avalon_parallel_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (led_r_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (led_g_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (led_g_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (led_g_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (led_g_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (led_g_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (led_g_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_controller_s1_agent (
		.clk                     (sdram_pll_sys_clk_clk),                                //             clk.clk
		.reset                   (sdram_controller_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sdram_controller_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_controller_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_controller_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_controller_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_controller_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_controller_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_controller_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_controller_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_controller_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_controller_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_controller_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_controller_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_controller_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_controller_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_controller_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_controller_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                              //                .channel
		.rf_sink_ready           (sdram_controller_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_controller_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_controller_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_controller_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_controller_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_controller_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sdram_controller_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_controller_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rsp_fifo (
		.clk               (sdram_pll_sys_clk_clk),                                //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	AvalonMM_mm_interconnect_0_router router (
		.sink_ready         (mm_bridge_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (sdram_pll_sys_clk_clk),                       //       clk.clk
		.reset              (mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                            //       src.ready
		.src_valid          (router_src_valid),                            //          .valid
		.src_data           (router_src_data),                             //          .data
		.src_channel        (router_src_channel),                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                       //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_router router_001 (
		.sink_ready         (jtag_master_master_agent_cp_ready),           //      sink.ready
		.sink_valid         (jtag_master_master_agent_cp_valid),           //          .valid
		.sink_data          (jtag_master_master_agent_cp_data),            //          .data
		.sink_startofpacket (jtag_master_master_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (jtag_master_master_agent_cp_endofpacket),     //          .endofpacket
		.clk                (sdram_pll_sys_clk_clk),                       //       clk.clk
		.reset              (mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                        //       src.ready
		.src_valid          (router_001_src_valid),                        //          .valid
		.src_data           (router_001_src_data),                         //          .data
		.src_channel        (router_001_src_channel),                      //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                   //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (led_r_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (led_r_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (led_r_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (led_r_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (led_r_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //       src.ready
		.src_valid          (router_002_src_valid),                                    //          .valid
		.src_data           (router_002_src_data),                                     //          .data
		.src_channel        (router_002_src_channel),                                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (hex_03_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (hex_03_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (hex_03_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (hex_03_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hex_03_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (router_003_src_ready),                                     //       src.ready
		.src_valid          (router_003_src_valid),                                     //          .valid
		.src_data           (router_003_src_data),                                      //          .data
		.src_channel        (router_003_src_channel),                                   //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (hex_47_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (hex_47_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (hex_47_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (hex_47_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hex_47_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (router_004_src_ready),                                     //       src.ready
		.src_valid          (router_004_src_valid),                                     //          .valid
		.src_data           (router_004_src_data),                                      //          .data
		.src_channel        (router_004_src_channel),                                   //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (key_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (key_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (key_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (key_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (key_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_005_src_ready),                                  //       src.ready
		.src_valid          (router_005_src_valid),                                  //          .valid
		.src_data           (router_005_src_data),                                   //          .data
		.src_channel        (router_005_src_channel),                                //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                             //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (switch_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (switch_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (switch_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (switch_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (switch_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (router_006_src_ready),                                     //       src.ready
		.src_valid          (router_006_src_valid),                                     //          .valid
		.src_data           (router_006_src_data),                                      //          .data
		.src_channel        (router_006_src_channel),                                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (led_g_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (led_g_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (led_g_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (led_g_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (led_g_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (router_007_src_ready),                                    //       src.ready
		.src_valid          (router_007_src_valid),                                    //          .valid
		.src_data           (router_007_src_data),                                     //          .data
		.src_channel        (router_007_src_channel),                                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                               //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (sdram_controller_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_controller_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_controller_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_controller_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_controller_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (sdram_pll_sys_clk_clk),                              //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                               //       src.ready
		.src_valid          (router_008_src_valid),                               //          .valid
		.src_data           (router_008_src_data),                                //          .data
		.src_channel        (router_008_src_channel),                             //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_m0_limiter (
		.clk                    (sdram_pll_sys_clk_clk),                       //       clk.clk
		.reset                  (mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                            //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                            //          .valid
		.cmd_sink_data          (router_src_data),                             //          .data
		.cmd_sink_channel       (router_src_channel),                          //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                    //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                      //          .endofpacket
		.cmd_src_ready          (mm_bridge_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (mm_bridge_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (mm_bridge_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (mm_bridge_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                           //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                         //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                            //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                     //          .endofpacket
		.rsp_src_ready          (mm_bridge_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (mm_bridge_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (mm_bridge_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (mm_bridge_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (mm_bridge_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag_master_master_limiter (
		.clk                    (sdram_pll_sys_clk_clk),                            //       clk.clk
		.reset                  (mm_bridge_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                             //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                             //          .valid
		.cmd_sink_data          (router_001_src_data),                              //          .data
		.cmd_sink_channel       (router_001_src_channel),                           //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                     //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                       //          .endofpacket
		.cmd_src_ready          (jtag_master_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (jtag_master_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (jtag_master_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (jtag_master_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (jtag_master_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                            //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                          //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                             //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                      //          .endofpacket
		.rsp_src_ready          (jtag_master_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (jtag_master_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (jtag_master_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (jtag_master_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (jtag_master_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (jtag_master_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (jtag_master_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	AvalonMM_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (sdram_pll_sys_clk_clk),                       //        clk.clk
		.reset              (mm_bridge_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_bridge_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (mm_bridge_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (mm_bridge_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (mm_bridge_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (mm_bridge_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (mm_bridge_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                        //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                        //           .valid
		.src0_data          (cmd_demux_src0_data),                         //           .data
		.src0_channel       (cmd_demux_src0_channel),                      //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                  //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                        //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                        //           .valid
		.src1_data          (cmd_demux_src1_data),                         //           .data
		.src1_channel       (cmd_demux_src1_channel),                      //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                  //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                        //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                        //           .valid
		.src2_data          (cmd_demux_src2_data),                         //           .data
		.src2_channel       (cmd_demux_src2_channel),                      //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                  //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                        //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                        //           .valid
		.src3_data          (cmd_demux_src3_data),                         //           .data
		.src3_channel       (cmd_demux_src3_channel),                      //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                  //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                        //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                        //           .valid
		.src4_data          (cmd_demux_src4_data),                         //           .data
		.src4_channel       (cmd_demux_src4_channel),                      //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                  //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                        //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                        //           .valid
		.src5_data          (cmd_demux_src5_data),                         //           .data
		.src5_channel       (cmd_demux_src5_channel),                      //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                  //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                        //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                        //           .valid
		.src6_data          (cmd_demux_src6_data),                         //           .data
		.src6_channel       (cmd_demux_src6_channel),                      //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket)                   //           .endofpacket
	);

	AvalonMM_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (sdram_pll_sys_clk_clk),                            //        clk.clk
		.reset              (mm_bridge_reset_reset_bridge_in_reset_reset),      //  clk_reset.reset
		.sink_ready         (jtag_master_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (jtag_master_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (jtag_master_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (jtag_master_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (jtag_master_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (jtag_master_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                         //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                         //           .valid
		.src0_data          (cmd_demux_001_src0_data),                          //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                       //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                   //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                         //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                         //           .valid
		.src1_data          (cmd_demux_001_src1_data),                          //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                       //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                   //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                         //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                         //           .valid
		.src2_data          (cmd_demux_001_src2_data),                          //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                       //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                 //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                   //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                         //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                         //           .valid
		.src3_data          (cmd_demux_001_src3_data),                          //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                       //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                 //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                   //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                         //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                         //           .valid
		.src4_data          (cmd_demux_001_src4_data),                          //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                       //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                 //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                   //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                         //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                         //           .valid
		.src5_data          (cmd_demux_001_src5_data),                          //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                       //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                 //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                   //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                         //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                         //           .valid
		.src6_data          (cmd_demux_001_src6_data),                          //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                       //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                 //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket)                    //           .endofpacket
	);

	AvalonMM_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_out_valid),                       //          .valid
		.sink0_channel       (crosser_out_channel),                     //          .channel
		.sink0_data          (crosser_out_data),                        //          .data
		.sink0_startofpacket (crosser_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                 //          .endofpacket
		.sink1_ready         (crosser_006_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_006_out_valid),                   //          .valid
		.sink1_channel       (crosser_006_out_channel),                 //          .channel
		.sink1_data          (crosser_006_out_data),                    //          .data
		.sink1_startofpacket (crosser_006_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_006_out_endofpacket)              //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                   //          .valid
		.sink0_channel       (crosser_001_out_channel),                 //          .channel
		.sink0_data          (crosser_001_out_data),                    //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),             //          .endofpacket
		.sink1_ready         (crosser_007_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_007_out_valid),                   //          .valid
		.sink1_channel       (crosser_007_out_channel),                 //          .channel
		.sink1_data          (crosser_007_out_data),                    //          .data
		.sink1_startofpacket (crosser_007_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_007_out_endofpacket)              //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                   //          .valid
		.sink0_channel       (crosser_002_out_channel),                 //          .channel
		.sink0_data          (crosser_002_out_data),                    //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),             //          .endofpacket
		.sink1_ready         (crosser_008_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_008_out_valid),                   //          .valid
		.sink1_channel       (crosser_008_out_channel),                 //          .channel
		.sink1_data          (crosser_008_out_data),                    //          .data
		.sink1_startofpacket (crosser_008_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_008_out_endofpacket)              //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                   //          .valid
		.sink0_channel       (crosser_003_out_channel),                 //          .channel
		.sink0_data          (crosser_003_out_data),                    //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket),             //          .endofpacket
		.sink1_ready         (crosser_009_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_009_out_valid),                   //          .valid
		.sink1_channel       (crosser_009_out_channel),                 //          .channel
		.sink1_data          (crosser_009_out_data),                    //          .data
		.sink1_startofpacket (crosser_009_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_009_out_endofpacket)              //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                   //          .valid
		.sink0_channel       (crosser_004_out_channel),                 //          .channel
		.sink0_data          (crosser_004_out_data),                    //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket),             //          .endofpacket
		.sink1_ready         (crosser_010_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_010_out_valid),                   //          .valid
		.sink1_channel       (crosser_010_out_channel),                 //          .channel
		.sink1_data          (crosser_010_out_data),                    //          .data
		.sink1_startofpacket (crosser_010_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_010_out_endofpacket)              //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                   //          .valid
		.sink0_channel       (crosser_005_out_channel),                 //          .channel
		.sink0_data          (crosser_005_out_data),                    //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket),             //          .endofpacket
		.sink1_ready         (crosser_011_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_011_out_valid),                   //          .valid
		.sink1_channel       (crosser_011_out_channel),                 //          .channel
		.sink1_data          (crosser_011_out_data),                    //          .data
		.sink1_startofpacket (crosser_011_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_011_out_endofpacket)              //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (sdram_pll_sys_clk_clk),                              //       clk.clk
		.reset               (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                              //          .valid
		.src_data            (cmd_mux_006_src_data),                               //          .data
		.src_channel         (cmd_mux_006_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                             //          .channel
		.sink0_data          (cmd_demux_src6_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                      //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)               //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                    //      sink.ready
		.sink_channel       (router_003_src_channel),                  //          .channel
		.sink_data          (router_003_src_data),                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_003_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)           //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)           //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)           //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.src1_data          (rsp_demux_004_src1_data),                 //          .data
		.src1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)           //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (led_r_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                //          .valid
		.src1_data          (rsp_demux_005_src1_data),                 //          .data
		.src1_channel       (rsp_demux_005_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)           //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (sdram_pll_sys_clk_clk),                              //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                               //      sink.ready
		.sink_channel       (router_008_src_channel),                             //          .channel
		.sink_data          (router_008_src_data),                                //          .data
		.sink_startofpacket (router_008_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_008_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_006_src0_data),                            //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_006_src1_data),                            //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                      //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (sdram_pll_sys_clk_clk),                       //       clk.clk
		.reset               (mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                           //          .valid
		.src_data            (rsp_mux_src_data),                            //          .data
		.src_channel         (rsp_mux_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_012_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_012_out_valid),                       //          .valid
		.sink0_channel       (crosser_012_out_channel),                     //          .channel
		.sink0_data          (crosser_012_out_data),                        //          .data
		.sink0_startofpacket (crosser_012_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_012_out_endofpacket),                 //          .endofpacket
		.sink1_ready         (crosser_014_out_ready),                       //     sink1.ready
		.sink1_valid         (crosser_014_out_valid),                       //          .valid
		.sink1_channel       (crosser_014_out_channel),                     //          .channel
		.sink1_data          (crosser_014_out_data),                        //          .data
		.sink1_startofpacket (crosser_014_out_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (crosser_014_out_endofpacket),                 //          .endofpacket
		.sink2_ready         (crosser_016_out_ready),                       //     sink2.ready
		.sink2_valid         (crosser_016_out_valid),                       //          .valid
		.sink2_channel       (crosser_016_out_channel),                     //          .channel
		.sink2_data          (crosser_016_out_data),                        //          .data
		.sink2_startofpacket (crosser_016_out_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (crosser_016_out_endofpacket),                 //          .endofpacket
		.sink3_ready         (crosser_018_out_ready),                       //     sink3.ready
		.sink3_valid         (crosser_018_out_valid),                       //          .valid
		.sink3_channel       (crosser_018_out_channel),                     //          .channel
		.sink3_data          (crosser_018_out_data),                        //          .data
		.sink3_startofpacket (crosser_018_out_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (crosser_018_out_endofpacket),                 //          .endofpacket
		.sink4_ready         (crosser_020_out_ready),                       //     sink4.ready
		.sink4_valid         (crosser_020_out_valid),                       //          .valid
		.sink4_channel       (crosser_020_out_channel),                     //          .channel
		.sink4_data          (crosser_020_out_data),                        //          .data
		.sink4_startofpacket (crosser_020_out_startofpacket),               //          .startofpacket
		.sink4_endofpacket   (crosser_020_out_endofpacket),                 //          .endofpacket
		.sink5_ready         (crosser_022_out_ready),                       //     sink5.ready
		.sink5_valid         (crosser_022_out_valid),                       //          .valid
		.sink5_channel       (crosser_022_out_channel),                     //          .channel
		.sink5_data          (crosser_022_out_data),                        //          .data
		.sink5_startofpacket (crosser_022_out_startofpacket),               //          .startofpacket
		.sink5_endofpacket   (crosser_022_out_endofpacket),                 //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                    //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                    //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                  //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                     //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),            //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket)               //          .endofpacket
	);

	AvalonMM_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (sdram_pll_sys_clk_clk),                       //       clk.clk
		.reset               (mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                       //          .valid
		.src_data            (rsp_mux_001_src_data),                        //          .data
		.src_channel         (rsp_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (crosser_013_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_013_out_valid),                       //          .valid
		.sink0_channel       (crosser_013_out_channel),                     //          .channel
		.sink0_data          (crosser_013_out_data),                        //          .data
		.sink0_startofpacket (crosser_013_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_013_out_endofpacket),                 //          .endofpacket
		.sink1_ready         (crosser_015_out_ready),                       //     sink1.ready
		.sink1_valid         (crosser_015_out_valid),                       //          .valid
		.sink1_channel       (crosser_015_out_channel),                     //          .channel
		.sink1_data          (crosser_015_out_data),                        //          .data
		.sink1_startofpacket (crosser_015_out_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (crosser_015_out_endofpacket),                 //          .endofpacket
		.sink2_ready         (crosser_017_out_ready),                       //     sink2.ready
		.sink2_valid         (crosser_017_out_valid),                       //          .valid
		.sink2_channel       (crosser_017_out_channel),                     //          .channel
		.sink2_data          (crosser_017_out_data),                        //          .data
		.sink2_startofpacket (crosser_017_out_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (crosser_017_out_endofpacket),                 //          .endofpacket
		.sink3_ready         (crosser_019_out_ready),                       //     sink3.ready
		.sink3_valid         (crosser_019_out_valid),                       //          .valid
		.sink3_channel       (crosser_019_out_channel),                     //          .channel
		.sink3_data          (crosser_019_out_data),                        //          .data
		.sink3_startofpacket (crosser_019_out_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (crosser_019_out_endofpacket),                 //          .endofpacket
		.sink4_ready         (crosser_021_out_ready),                       //     sink4.ready
		.sink4_valid         (crosser_021_out_valid),                       //          .valid
		.sink4_channel       (crosser_021_out_channel),                     //          .channel
		.sink4_data          (crosser_021_out_data),                        //          .data
		.sink4_startofpacket (crosser_021_out_startofpacket),               //          .startofpacket
		.sink4_endofpacket   (crosser_021_out_endofpacket),                 //          .endofpacket
		.sink5_ready         (crosser_023_out_ready),                       //     sink5.ready
		.sink5_valid         (crosser_023_out_valid),                       //          .valid
		.sink5_channel       (crosser_023_out_channel),                     //          .channel
		.sink5_data          (crosser_023_out_data),                        //          .data
		.sink5_startofpacket (crosser_023_out_startofpacket),               //          .startofpacket
		.sink5_endofpacket   (crosser_023_out_endofpacket),                 //          .endofpacket
		.sink6_ready         (rsp_demux_006_src1_ready),                    //     sink6.ready
		.sink6_valid         (rsp_demux_006_src1_valid),                    //          .valid
		.sink6_channel       (rsp_demux_006_src1_channel),                  //          .channel
		.sink6_data          (rsp_demux_006_src1_data),                     //          .data
		.sink6_startofpacket (rsp_demux_006_src1_startofpacket),            //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src1_endofpacket)               //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                        //            in.ready
		.in_valid          (cmd_demux_src0_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                      //              .channel
		.in_data           (cmd_demux_src0_data),                         //              .data
		.out_ready         (crosser_out_ready),                           //           out.ready
		.out_valid         (crosser_out_valid),                           //              .valid
		.out_startofpacket (crosser_out_startofpacket),                   //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                     //              .endofpacket
		.out_channel       (crosser_out_channel),                         //              .channel
		.out_data          (crosser_out_data),                            //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                        //            in.ready
		.in_valid          (cmd_demux_src1_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                      //              .channel
		.in_data           (cmd_demux_src1_data),                         //              .data
		.out_ready         (crosser_001_out_ready),                       //           out.ready
		.out_valid         (crosser_001_out_valid),                       //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_001_out_channel),                     //              .channel
		.out_data          (crosser_001_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                        //            in.ready
		.in_valid          (cmd_demux_src2_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                      //              .channel
		.in_data           (cmd_demux_src2_data),                         //              .data
		.out_ready         (crosser_002_out_ready),                       //           out.ready
		.out_valid         (crosser_002_out_valid),                       //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_002_out_channel),                     //              .channel
		.out_data          (crosser_002_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                        //            in.ready
		.in_valid          (cmd_demux_src3_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                      //              .channel
		.in_data           (cmd_demux_src3_data),                         //              .data
		.out_ready         (crosser_003_out_ready),                       //           out.ready
		.out_valid         (crosser_003_out_valid),                       //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_003_out_channel),                     //              .channel
		.out_data          (crosser_003_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                        //            in.ready
		.in_valid          (cmd_demux_src4_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                      //              .channel
		.in_data           (cmd_demux_src4_data),                         //              .data
		.out_ready         (crosser_004_out_ready),                       //           out.ready
		.out_valid         (crosser_004_out_valid),                       //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_004_out_channel),                     //              .channel
		.out_data          (crosser_004_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                        //            in.ready
		.in_valid          (cmd_demux_src5_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                      //              .channel
		.in_data           (cmd_demux_src5_data),                         //              .data
		.out_ready         (crosser_005_out_ready),                       //           out.ready
		.out_valid         (crosser_005_out_valid),                       //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_005_out_channel),                     //              .channel
		.out_data          (crosser_005_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                    //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                  //              .channel
		.in_data           (cmd_demux_001_src0_data),                     //              .data
		.out_ready         (crosser_006_out_ready),                       //           out.ready
		.out_valid         (crosser_006_out_valid),                       //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_006_out_channel),                     //              .channel
		.out_data          (crosser_006_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                    //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                  //              .channel
		.in_data           (cmd_demux_001_src1_data),                     //              .data
		.out_ready         (crosser_007_out_ready),                       //           out.ready
		.out_valid         (crosser_007_out_valid),                       //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_007_out_channel),                     //              .channel
		.out_data          (crosser_007_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                    //            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                  //              .channel
		.in_data           (cmd_demux_001_src2_data),                     //              .data
		.out_ready         (crosser_008_out_ready),                       //           out.ready
		.out_valid         (crosser_008_out_valid),                       //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_008_out_channel),                     //              .channel
		.out_data          (crosser_008_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                    //            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                  //              .channel
		.in_data           (cmd_demux_001_src3_data),                     //              .data
		.out_ready         (crosser_009_out_ready),                       //           out.ready
		.out_valid         (crosser_009_out_valid),                       //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_009_out_channel),                     //              .channel
		.out_data          (crosser_009_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                    //            in.ready
		.in_valid          (cmd_demux_001_src4_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_001_src4_channel),                  //              .channel
		.in_data           (cmd_demux_001_src4_data),                     //              .data
		.out_ready         (crosser_010_out_ready),                       //           out.ready
		.out_valid         (crosser_010_out_valid),                       //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_010_out_channel),                     //              .channel
		.out_data          (crosser_010_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (sdram_pll_sys_clk_clk),                       //        in_clk.clk
		.in_reset          (mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                               //       out_clk.clk
		.out_reset         (led_r_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src5_ready),                    //            in.ready
		.in_valid          (cmd_demux_001_src5_valid),                    //              .valid
		.in_startofpacket  (cmd_demux_001_src5_startofpacket),            //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src5_endofpacket),              //              .endofpacket
		.in_channel        (cmd_demux_001_src5_channel),                  //              .channel
		.in_data           (cmd_demux_001_src5_data),                     //              .data
		.out_ready         (crosser_011_out_ready),                       //           out.ready
		.out_valid         (crosser_011_out_valid),                       //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_011_out_channel),                     //              .channel
		.out_data          (crosser_011_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                        //            in.ready
		.in_valid          (rsp_demux_src0_valid),                        //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                  //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                      //              .channel
		.in_data           (rsp_demux_src0_data),                         //              .data
		.out_ready         (crosser_012_out_ready),                       //           out.ready
		.out_valid         (crosser_012_out_valid),                       //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_012_out_channel),                     //              .channel
		.out_data          (crosser_012_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                        //            in.ready
		.in_valid          (rsp_demux_src1_valid),                        //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                  //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                      //              .channel
		.in_data           (rsp_demux_src1_data),                         //              .data
		.out_ready         (crosser_013_out_ready),                       //           out.ready
		.out_valid         (crosser_013_out_valid),                       //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_013_out_channel),                     //              .channel
		.out_data          (crosser_013_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                    //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                  //              .channel
		.in_data           (rsp_demux_001_src0_data),                     //              .data
		.out_ready         (crosser_014_out_ready),                       //           out.ready
		.out_valid         (crosser_014_out_valid),                       //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_014_out_channel),                     //              .channel
		.out_data          (crosser_014_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                    //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                  //              .channel
		.in_data           (rsp_demux_001_src1_data),                     //              .data
		.out_ready         (crosser_015_out_ready),                       //           out.ready
		.out_valid         (crosser_015_out_valid),                       //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_015_out_channel),                     //              .channel
		.out_data          (crosser_015_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                    //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                  //              .channel
		.in_data           (rsp_demux_002_src0_data),                     //              .data
		.out_ready         (crosser_016_out_ready),                       //           out.ready
		.out_valid         (crosser_016_out_valid),                       //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_016_out_channel),                     //              .channel
		.out_data          (crosser_016_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                    //            in.ready
		.in_valid          (rsp_demux_002_src1_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_002_src1_channel),                  //              .channel
		.in_data           (rsp_demux_002_src1_data),                     //              .data
		.out_ready         (crosser_017_out_ready),                       //           out.ready
		.out_valid         (crosser_017_out_valid),                       //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_017_out_channel),                     //              .channel
		.out_data          (crosser_017_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                    //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                  //              .channel
		.in_data           (rsp_demux_003_src0_data),                     //              .data
		.out_ready         (crosser_018_out_ready),                       //           out.ready
		.out_valid         (crosser_018_out_valid),                       //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_018_out_channel),                     //              .channel
		.out_data          (crosser_018_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                    //            in.ready
		.in_valid          (rsp_demux_003_src1_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_003_src1_channel),                  //              .channel
		.in_data           (rsp_demux_003_src1_data),                     //              .data
		.out_ready         (crosser_019_out_ready),                       //           out.ready
		.out_valid         (crosser_019_out_valid),                       //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_019_out_channel),                     //              .channel
		.out_data          (crosser_019_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_020 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                    //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                  //              .channel
		.in_data           (rsp_demux_004_src0_data),                     //              .data
		.out_ready         (crosser_020_out_ready),                       //           out.ready
		.out_valid         (crosser_020_out_valid),                       //              .valid
		.out_startofpacket (crosser_020_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_020_out_channel),                     //              .channel
		.out_data          (crosser_020_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_021 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src1_ready),                    //            in.ready
		.in_valid          (rsp_demux_004_src1_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_004_src1_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src1_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_004_src1_channel),                  //              .channel
		.in_data           (rsp_demux_004_src1_data),                     //              .data
		.out_ready         (crosser_021_out_ready),                       //           out.ready
		.out_valid         (crosser_021_out_valid),                       //              .valid
		.out_startofpacket (crosser_021_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_021_out_channel),                     //              .channel
		.out_data          (crosser_021_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_022 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                    //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                  //              .channel
		.in_data           (rsp_demux_005_src0_data),                     //              .data
		.out_ready         (crosser_022_out_ready),                       //           out.ready
		.out_valid         (crosser_022_out_valid),                       //              .valid
		.out_startofpacket (crosser_022_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_022_out_channel),                     //              .channel
		.out_data          (crosser_022_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_023 (
		.in_clk            (clk_0_clk_clk),                               //        in_clk.clk
		.in_reset          (led_r_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (sdram_pll_sys_clk_clk),                       //       out_clk.clk
		.out_reset         (mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src1_ready),                    //            in.ready
		.in_valid          (rsp_demux_005_src1_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_005_src1_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src1_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_005_src1_channel),                  //              .channel
		.in_data           (rsp_demux_005_src1_data),                     //              .data
		.out_ready         (crosser_023_out_ready),                       //           out.ready
		.out_valid         (crosser_023_out_valid),                       //              .valid
		.out_startofpacket (crosser_023_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_023_out_channel),                     //              .channel
		.out_data          (crosser_023_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	AvalonMM_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (led_r_reset_reset_bridge_in_reset_reset),                     // in_rst_0.reset
		.in_0_data      (led_r_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (led_r_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (led_r_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                //         .error
	);

	AvalonMM_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (led_r_reset_reset_bridge_in_reset_reset),                      // in_rst_0.reset
		.in_0_data      (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (hex_03_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                             //         .error
	);

	AvalonMM_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (led_r_reset_reset_bridge_in_reset_reset),                      // in_rst_0.reset
		.in_0_data      (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (hex_47_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                             //         .error
	);

	AvalonMM_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (led_r_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (key_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (key_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (key_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                          //         .error
	);

	AvalonMM_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (led_r_reset_reset_bridge_in_reset_reset),                      // in_rst_0.reset
		.in_0_data      (switch_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (switch_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (switch_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                             //         .error
	);

	AvalonMM_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (led_r_reset_reset_bridge_in_reset_reset),                     // in_rst_0.reset
		.in_0_data      (led_g_avalon_parallel_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (led_g_avalon_parallel_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (led_g_avalon_parallel_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                            //         .error
	);

	AvalonMM_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (sdram_pll_sys_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (sdram_controller_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_controller_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (sdram_controller_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (sdram_controller_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                   //         .error
	);

endmodule
